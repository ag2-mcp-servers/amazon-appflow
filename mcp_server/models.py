# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-28T09:38:36+00:00

from __future__ import annotations

from datetime import datetime
from enum import Enum
from typing import Any, Dict, List, Optional

from pydantic import BaseModel, ConfigDict, Field, RootModel, SecretStr, conint, constr


class ARN(RootModel[constr(pattern=r'arn:aws:.*:.*:[0-9]+:.*', max_length=512)]):
    root: constr(pattern=r'arn:aws:.*:.*:[0-9]+:.*', max_length=512)


class AccessDeniedException(RootModel[Any]):
    root: Any


class AccessKeyId(RootModel[SecretStr]):
    root: SecretStr


class AccessToken(RootModel[SecretStr]):
    root: SecretStr


class AccountName(RootModel[constr(pattern=r'\S+', max_length=512)]):
    root: constr(pattern=r'\S+', max_length=512)


class AggregationType(Enum):
    None_ = 'None'
    SingleFile = 'SingleFile'


class AmplitudeConnectorOperator(Enum):
    BETWEEN = 'BETWEEN'


class AmplitudeConnectorProfileProperties(BaseModel):
    pass


class AmplitudeMetadata(BaseModel):
    pass


class ApiKey(RootModel[SecretStr]):
    root: SecretStr


class ApiSecretKey(RootModel[SecretStr]):
    root: SecretStr


class ApiToken(RootModel[constr(pattern=r'\S+', max_length=256)]):
    root: constr(pattern=r'\S+', max_length=256)


class ApiVersion(RootModel[constr(pattern=r'\S+', max_length=256)]):
    root: constr(pattern=r'\S+', max_length=256)


class ApplicationHostUrl(
    RootModel[
        constr(
            pattern=r'^(https?)://[-a-zA-Z0-9+&@#/%?=~_|!:,.;]*[-a-zA-Z0-9+&@#/%=~_|]',
            max_length=256,
        )
    ]
):
    root: constr(
        pattern=r'^(https?)://[-a-zA-Z0-9+&@#/%?=~_|!:,.;]*[-a-zA-Z0-9+&@#/%=~_|]',
        max_length=256,
    )


class ApplicationKey(RootModel[constr(pattern=r'\S+', max_length=512)]):
    root: constr(pattern=r'\S+', max_length=512)


class ApplicationServicePath(RootModel[constr(pattern=r'\S+', max_length=512)]):
    root: constr(pattern=r'\S+', max_length=512)


class ApplicationType(RootModel[constr(pattern=r'\S+', max_length=512)]):
    root: constr(pattern=r'\S+', max_length=512)


class AuthCode(RootModel[constr(pattern=r'\S+', max_length=2048)]):
    root: constr(pattern=r'\S+', max_length=2048)


class AuthCodeUrl(
    RootModel[
        constr(
            pattern=r'^(https?)://[-a-zA-Z0-9+&@#/%?=~_|!:,.;]*[-a-zA-Z0-9+&@#/%=~_|]',
            max_length=256,
        )
    ]
):
    root: constr(
        pattern=r'^(https?)://[-a-zA-Z0-9+&@#/%?=~_|!:,.;]*[-a-zA-Z0-9+&@#/%=~_|]',
        max_length=256,
    )


class AuthCodeUrlList(RootModel[List[AuthCodeUrl]]):
    root: List[AuthCodeUrl]


class AuthenticationType(Enum):
    OAUTH2 = 'OAUTH2'
    APIKEY = 'APIKEY'
    BASIC = 'BASIC'
    CUSTOM = 'CUSTOM'


class Boolean(RootModel[bool]):
    root: bool


class BucketName(RootModel[constr(pattern=r'\S+', min_length=3, max_length=63)]):
    root: constr(pattern=r'\S+', min_length=3, max_length=63)


class BucketPrefix(RootModel[constr(pattern=r'.*', max_length=512)]):
    root: constr(pattern=r'.*', max_length=512)


class BusinessUnitId(RootModel[constr(pattern=r'\S+', max_length=18)]):
    root: constr(pattern=r'\S+', max_length=18)


class CatalogType(Enum):
    GLUE = 'GLUE'


class ClientCredentialsArn(RootModel[SecretStr]):
    root: SecretStr


class ClientId(RootModel[constr(pattern=r'\S+', max_length=512)]):
    root: constr(pattern=r'\S+', max_length=512)


class ClientNumber(RootModel[constr(pattern=r'^\d{3}$', min_length=3, max_length=3)]):
    root: constr(pattern=r'^\d{3}$', min_length=3, max_length=3)


class ClientSecret(RootModel[SecretStr]):
    root: SecretStr


class ClientToken(RootModel[constr(pattern=r'[ -~]+', min_length=1, max_length=256)]):
    root: constr(pattern=r'[ -~]+', min_length=1, max_length=256)


class ClusterIdentifier(RootModel[constr(pattern=r'\S+', max_length=512)]):
    root: constr(pattern=r'\S+', max_length=512)


class ConflictException(RootModel[Any]):
    root: Any


class ConnectionMode(Enum):
    Public = 'Public'
    Private = 'Private'


class ConnectorAuthenticationException(RootModel[Any]):
    root: Any


class ConnectorDescription(
    RootModel[constr(pattern=r'[\w!@#\-.?,\s]*', max_length=2048)]
):
    root: constr(pattern=r'[\w!@#\-.?,\s]*', max_length=2048)


class ConnectorLabel(
    RootModel[constr(pattern=r'[a-zA-Z0-9][\w!@#.-]+', max_length=256)]
):
    root: constr(pattern=r'[a-zA-Z0-9][\w!@#.-]+', max_length=256)


class ConnectorMode(RootModel[constr(pattern=r'\S+', max_length=256)]):
    root: constr(pattern=r'\S+', max_length=256)


class ConnectorModeList(RootModel[List[ConnectorMode]]):
    root: List[ConnectorMode]


class ConnectorName(RootModel[constr(pattern=r'.*', max_length=256)]):
    root: constr(pattern=r'.*', max_length=256)


class ConnectorOwner(RootModel[constr(pattern=r'.*', max_length=256)]):
    root: constr(pattern=r'.*', max_length=256)


class ConnectorProfileArn(
    RootModel[constr(pattern=r'arn:aws:appflow:.*:[0-9]+:.*', max_length=512)]
):
    root: constr(pattern=r'arn:aws:appflow:.*:[0-9]+:.*', max_length=512)


class ConnectorProfileName(RootModel[constr(pattern=r'[\w/!@#+=.-]+', max_length=256)]):
    root: constr(pattern=r'[\w/!@#+=.-]+', max_length=256)


class ConnectorProfileNameList(RootModel[List[ConnectorProfileName]]):
    root: List[ConnectorProfileName] = Field(..., max_length=100, min_length=0)


class ConnectorProvisioningType(Enum):
    LAMBDA = 'LAMBDA'


class ConnectorRuntimeSettingDataType(
    RootModel[constr(pattern=r'\S+', max_length=256)]
):
    root: constr(pattern=r'\S+', max_length=256)


class ConnectorRuntimeSettingScope(RootModel[constr(pattern=r'\S+', max_length=256)]):
    root: constr(pattern=r'\S+', max_length=256)


class ConnectorServerException(RootModel[Any]):
    root: Any


class ConnectorSuppliedValue(RootModel[constr(pattern=r'\S+', max_length=256)]):
    root: constr(pattern=r'\S+', max_length=256)


class ConnectorSuppliedValueList(RootModel[List[ConnectorSuppliedValue]]):
    root: List[ConnectorSuppliedValue]


class ConnectorSuppliedValueOptionList(RootModel[List[ConnectorSuppliedValue]]):
    root: List[ConnectorSuppliedValue]


class ConnectorType(Enum):
    Salesforce = 'Salesforce'
    Singular = 'Singular'
    Slack = 'Slack'
    Redshift = 'Redshift'
    S3 = 'S3'
    Marketo = 'Marketo'
    Googleanalytics = 'Googleanalytics'
    Zendesk = 'Zendesk'
    Servicenow = 'Servicenow'
    Datadog = 'Datadog'
    Trendmicro = 'Trendmicro'
    Snowflake = 'Snowflake'
    Dynatrace = 'Dynatrace'
    Infornexus = 'Infornexus'
    Amplitude = 'Amplitude'
    Veeva = 'Veeva'
    EventBridge = 'EventBridge'
    LookoutMetrics = 'LookoutMetrics'
    Upsolver = 'Upsolver'
    Honeycode = 'Honeycode'
    CustomerProfiles = 'CustomerProfiles'
    SAPOData = 'SAPOData'
    CustomConnector = 'CustomConnector'
    Pardot = 'Pardot'


class ConnectorTypeList(RootModel[List[ConnectorType]]):
    root: List[ConnectorType] = Field(..., max_length=100, min_length=0)


class ConnectorVersion(RootModel[constr(pattern=r'\S+', max_length=256)]):
    root: constr(pattern=r'\S+', max_length=256)


class CreateConnectorProfileResponse(BaseModel):
    connectorProfileArn: Optional[ConnectorProfileArn] = None


class CreatedBy(RootModel[constr(pattern=r'\S+', max_length=256)]):
    root: constr(pattern=r'\S+', max_length=256)


class CredentialsMapKey(RootModel[SecretStr]):
    root: SecretStr


class CredentialsMapValue(RootModel[SecretStr]):
    root: SecretStr


class CustomAuthenticationType(RootModel[constr(pattern=r'\S+', max_length=256)]):
    root: constr(pattern=r'\S+', max_length=256)


class CustomPropertyKey(
    RootModel[constr(pattern=r'[\w]+', min_length=1, max_length=128)]
):
    root: constr(pattern=r'[\w]+', min_length=1, max_length=128)


class CustomPropertyValue(RootModel[constr(pattern=r'\S+', max_length=2048)]):
    root: constr(pattern=r'\S+', max_length=2048)


class CustomerProfilesMetadata(BaseModel):
    pass


class DataApiRoleArn(
    RootModel[constr(pattern=r'arn:aws:iam:.*:[0-9]+:.*', max_length=512)]
):
    root: constr(pattern=r'arn:aws:iam:.*:[0-9]+:.*', max_length=512)


class DataPullMode(Enum):
    Incremental = 'Incremental'
    Complete = 'Complete'


class DatabaseName(RootModel[constr(pattern=r'\S+', max_length=512)]):
    root: constr(pattern=r'\S+', max_length=512)


class DatabaseUrl(RootModel[constr(pattern=r'\S+', max_length=512)]):
    root: constr(pattern=r'\S+', max_length=512)


class DatadogConnectorOperator(Enum):
    PROJECTION = 'PROJECTION'
    BETWEEN = 'BETWEEN'
    EQUAL_TO = 'EQUAL_TO'
    ADDITION = 'ADDITION'
    MULTIPLICATION = 'MULTIPLICATION'
    DIVISION = 'DIVISION'
    SUBTRACTION = 'SUBTRACTION'
    MASK_ALL = 'MASK_ALL'
    MASK_FIRST_N = 'MASK_FIRST_N'
    MASK_LAST_N = 'MASK_LAST_N'
    VALIDATE_NON_NULL = 'VALIDATE_NON_NULL'
    VALIDATE_NON_ZERO = 'VALIDATE_NON_ZERO'
    VALIDATE_NON_NEGATIVE = 'VALIDATE_NON_NEGATIVE'
    VALIDATE_NUMERIC = 'VALIDATE_NUMERIC'
    NO_OP = 'NO_OP'


class DatadogConnectorProfileCredentials(BaseModel):
    apiKey: ApiKey
    applicationKey: ApplicationKey


class DatadogMetadata(BaseModel):
    pass


class Date(RootModel[datetime]):
    root: datetime


class DatetimeTypeFieldName(RootModel[constr(pattern=r'.*', max_length=256)]):
    root: constr(pattern=r'.*', max_length=256)


class DeleteConnectorProfileRequest(BaseModel):
    connectorProfileName: ConnectorProfileName
    forceDelete: Optional[Boolean] = None


class DeleteConnectorProfileResponse(BaseModel):
    pass


class DeleteFlowResponse(BaseModel):
    pass


class DescribeConnectorRequest(BaseModel):
    connectorLabel: Optional[ConnectorLabel] = None
    connectorType: ConnectorType


class Description(RootModel[constr(pattern=r'[\s\w/!@#+=.-]*', max_length=1024)]):
    root: constr(pattern=r'[\s\w/!@#+=.-]*', max_length=1024)


class DestinationField(RootModel[constr(pattern=r'.*', max_length=256)]):
    root: constr(pattern=r'.*', max_length=256)


class DocumentType(RootModel[constr(pattern=r'[\s\w_-]+', max_length=512)]):
    root: constr(pattern=r'[\s\w_-]+', max_length=512)


class DomainName(RootModel[constr(pattern=r'\S+', max_length=64)]):
    root: constr(pattern=r'\S+', max_length=64)


class Double(RootModel[float]):
    root: float


class DynatraceConnectorOperator(Enum):
    PROJECTION = 'PROJECTION'
    BETWEEN = 'BETWEEN'
    EQUAL_TO = 'EQUAL_TO'
    ADDITION = 'ADDITION'
    MULTIPLICATION = 'MULTIPLICATION'
    DIVISION = 'DIVISION'
    SUBTRACTION = 'SUBTRACTION'
    MASK_ALL = 'MASK_ALL'
    MASK_FIRST_N = 'MASK_FIRST_N'
    MASK_LAST_N = 'MASK_LAST_N'
    VALIDATE_NON_NULL = 'VALIDATE_NON_NULL'
    VALIDATE_NON_ZERO = 'VALIDATE_NON_ZERO'
    VALIDATE_NON_NEGATIVE = 'VALIDATE_NON_NEGATIVE'
    VALIDATE_NUMERIC = 'VALIDATE_NUMERIC'
    NO_OP = 'NO_OP'


class DynatraceConnectorProfileCredentials(BaseModel):
    apiToken: ApiToken


class DynatraceMetadata(BaseModel):
    pass


class EntitiesPath(RootModel[constr(pattern=r'[\s\w/!@#+=,.-]*', max_length=256)]):
    root: constr(pattern=r'[\s\w/!@#+=,.-]*', max_length=256)


class EntityName(RootModel[constr(pattern=r'\S+', max_length=1024)]):
    root: constr(pattern=r'\S+', max_length=1024)


class ErrorHandlingConfig(BaseModel):
    bucketName: Optional[BucketName] = None
    bucketPrefix: Optional[BucketPrefix] = None
    failOnFirstDestinationError: Optional[Boolean] = None


class EventBridgeMetadata(BaseModel):
    pass


class ExecutionId(RootModel[constr(pattern=r'\S+', max_length=256)]):
    root: constr(pattern=r'\S+', max_length=256)


class ExecutionMessage(RootModel[constr(pattern=r'[\s\w/!@#+=.-]*', max_length=2048)]):
    root: constr(pattern=r'[\s\w/!@#+=.-]*', max_length=2048)


class ExecutionStatus(Enum):
    InProgress = 'InProgress'
    Successful = 'Successful'
    Error = 'Error'


class FieldType(RootModel[str]):
    root: str


class FileType(Enum):
    CSV = 'CSV'
    JSON = 'JSON'
    PARQUET = 'PARQUET'


class FlowArn(
    RootModel[constr(pattern=r'arn:aws:appflow:.*:[0-9]+:.*', max_length=512)]
):
    root: constr(pattern=r'arn:aws:appflow:.*:[0-9]+:.*', max_length=512)


class FlowDescription(RootModel[constr(pattern=r'[\w!@#\-.?,\s]*', max_length=2048)]):
    root: constr(pattern=r'[\w!@#\-.?,\s]*', max_length=2048)


class FlowErrorDeactivationThreshold(RootModel[conint(ge=1, le=100)]):
    root: conint(ge=1, le=100)


class FlowName(RootModel[constr(pattern=r'[a-zA-Z0-9][\w!@#.-]+', max_length=256)]):
    root: constr(pattern=r'[a-zA-Z0-9][\w!@#.-]+', max_length=256)


class FlowStatus(Enum):
    Active = 'Active'
    Deprecated = 'Deprecated'
    Deleted = 'Deleted'
    Draft = 'Draft'
    Errored = 'Errored'
    Suspended = 'Suspended'


class FlowStatusMessage(RootModel[constr(pattern=r'[\s\w/!@#+=.-]*', max_length=2048)]):
    root: constr(pattern=r'[\s\w/!@#+=.-]*', max_length=2048)


class GlueDataCatalogDatabaseName(RootModel[constr(max_length=255)]):
    root: constr(max_length=255)


class GlueDataCatalogIAMRole(
    RootModel[constr(pattern=r'arn:aws:iam:.*:[0-9]+:.*', max_length=512)]
):
    root: constr(pattern=r'arn:aws:iam:.*:[0-9]+:.*', max_length=512)


class GlueDataCatalogTablePrefix(RootModel[constr(max_length=128)]):
    root: constr(max_length=128)


class GoogleAnalyticsConnectorOperator(Enum):
    PROJECTION = 'PROJECTION'
    BETWEEN = 'BETWEEN'


class GoogleAnalyticsConnectorProfileProperties(BaseModel):
    pass


class Group(RootModel[constr(pattern=r'\S+', max_length=128)]):
    root: constr(pattern=r'\S+', max_length=128)


class HoneycodeConnectorProfileProperties(BaseModel):
    pass


class Identifier(RootModel[constr(pattern=r'\S+', max_length=128)]):
    root: constr(pattern=r'\S+', max_length=128)


class IncrementalPullConfig(BaseModel):
    datetimeTypeFieldName: Optional[DatetimeTypeFieldName] = None


class InforNexusConnectorOperator(Enum):
    PROJECTION = 'PROJECTION'
    BETWEEN = 'BETWEEN'
    EQUAL_TO = 'EQUAL_TO'
    ADDITION = 'ADDITION'
    MULTIPLICATION = 'MULTIPLICATION'
    DIVISION = 'DIVISION'
    SUBTRACTION = 'SUBTRACTION'
    MASK_ALL = 'MASK_ALL'
    MASK_FIRST_N = 'MASK_FIRST_N'
    MASK_LAST_N = 'MASK_LAST_N'
    VALIDATE_NON_NULL = 'VALIDATE_NON_NULL'
    VALIDATE_NON_ZERO = 'VALIDATE_NON_ZERO'
    VALIDATE_NON_NEGATIVE = 'VALIDATE_NON_NEGATIVE'
    VALIDATE_NUMERIC = 'VALIDATE_NUMERIC'
    NO_OP = 'NO_OP'


class InforNexusMetadata(BaseModel):
    pass


class InstanceUrl(RootModel[constr(pattern=r'\S+', max_length=256)]):
    root: constr(pattern=r'\S+', max_length=256)


class InternalServerException(RootModel[Any]):
    root: Any


class JavaBoolean(RootModel[bool]):
    root: bool


class KMSArn(
    RootModel[
        constr(pattern=r'arn:aws:kms:.*:[0-9]+:.*', min_length=20, max_length=2048)
    ]
):
    root: constr(pattern=r'arn:aws:kms:.*:[0-9]+:.*', min_length=20, max_length=2048)


class Key(RootModel[constr(pattern=r'\S+', max_length=512)]):
    root: constr(pattern=r'\S+', max_length=512)


class Label(RootModel[constr(pattern=r'.*', max_length=128)]):
    root: constr(pattern=r'.*', max_length=128)


class LambdaConnectorProvisioningConfig(BaseModel):
    lambdaArn: ARN


class ListEntitiesMaxResults(RootModel[conint(ge=1, le=10000)]):
    root: conint(ge=1, le=10000)


class ListTagsForResourceRequest(BaseModel):
    pass


class LogoURL(
    RootModel[
        constr(
            pattern=r'^(https?|ftp|file)://[-a-zA-Z0-9+&@#/%?=~_|!:,.;]*[-a-zA-Z0-9+&@#/%=~_|]',
            max_length=256,
        )
    ]
):
    root: constr(
        pattern=r'^(https?|ftp|file)://[-a-zA-Z0-9+&@#/%?=~_|!:,.;]*[-a-zA-Z0-9+&@#/%=~_|]',
        max_length=256,
    )


class LogonLanguage(RootModel[constr(pattern=r'^[a-zA-Z0-9_]*$', max_length=2)]):
    root: constr(pattern=r'^[a-zA-Z0-9_]*$', max_length=2)


class Long(RootModel[int]):
    root: int


class LookoutMetricsDestinationProperties(BaseModel):
    pass


class MarketoConnectorOperator(Enum):
    PROJECTION = 'PROJECTION'
    LESS_THAN = 'LESS_THAN'
    GREATER_THAN = 'GREATER_THAN'
    BETWEEN = 'BETWEEN'
    ADDITION = 'ADDITION'
    MULTIPLICATION = 'MULTIPLICATION'
    DIVISION = 'DIVISION'
    SUBTRACTION = 'SUBTRACTION'
    MASK_ALL = 'MASK_ALL'
    MASK_FIRST_N = 'MASK_FIRST_N'
    MASK_LAST_N = 'MASK_LAST_N'
    VALIDATE_NON_NULL = 'VALIDATE_NON_NULL'
    VALIDATE_NON_ZERO = 'VALIDATE_NON_ZERO'
    VALIDATE_NON_NEGATIVE = 'VALIDATE_NON_NEGATIVE'
    VALIDATE_NUMERIC = 'VALIDATE_NUMERIC'
    NO_OP = 'NO_OP'


class MarketoConnectorProfileProperties(BaseModel):
    instanceUrl: InstanceUrl


class MarketoMetadata(BaseModel):
    pass


class MaxResults(RootModel[conint(ge=1, le=100)]):
    root: conint(ge=1, le=100)


class MostRecentExecutionMessage(
    RootModel[constr(pattern=r'[\w!@#\-.?,\s]*', max_length=2048)]
):
    root: constr(pattern=r'[\w!@#\-.?,\s]*', max_length=2048)


class Name(RootModel[constr(pattern=r'\S+', max_length=128)]):
    root: constr(pattern=r'\S+', max_length=128)


class NextToken(RootModel[constr(pattern=r'\S+', max_length=2048)]):
    root: constr(pattern=r'\S+', max_length=2048)


class OAuth2CustomPropType(Enum):
    TOKEN_URL = 'TOKEN_URL'
    AUTH_URL = 'AUTH_URL'


class OAuth2GrantType(Enum):
    CLIENT_CREDENTIALS = 'CLIENT_CREDENTIALS'
    AUTHORIZATION_CODE = 'AUTHORIZATION_CODE'


class OAuth2GrantTypeSupportedList(RootModel[List[OAuth2GrantType]]):
    root: List[OAuth2GrantType]


class OAuthScope(RootModel[constr(pattern=r'\S+', max_length=128)]):
    root: constr(pattern=r'\S+', max_length=128)


class OAuthScopeList(RootModel[List[OAuthScope]]):
    root: List[OAuthScope]


class Object(RootModel[constr(pattern=r'\S+', max_length=512)]):
    root: constr(pattern=r'\S+', max_length=512)


class ObjectTypeName(RootModel[constr(pattern=r'\S+', max_length=255)]):
    root: constr(pattern=r'\S+', max_length=255)


class Operator(Enum):
    PROJECTION = 'PROJECTION'
    LESS_THAN = 'LESS_THAN'
    GREATER_THAN = 'GREATER_THAN'
    CONTAINS = 'CONTAINS'
    BETWEEN = 'BETWEEN'
    LESS_THAN_OR_EQUAL_TO = 'LESS_THAN_OR_EQUAL_TO'
    GREATER_THAN_OR_EQUAL_TO = 'GREATER_THAN_OR_EQUAL_TO'
    EQUAL_TO = 'EQUAL_TO'
    NOT_EQUAL_TO = 'NOT_EQUAL_TO'
    ADDITION = 'ADDITION'
    MULTIPLICATION = 'MULTIPLICATION'
    DIVISION = 'DIVISION'
    SUBTRACTION = 'SUBTRACTION'
    MASK_ALL = 'MASK_ALL'
    MASK_FIRST_N = 'MASK_FIRST_N'
    MASK_LAST_N = 'MASK_LAST_N'
    VALIDATE_NON_NULL = 'VALIDATE_NON_NULL'
    VALIDATE_NON_ZERO = 'VALIDATE_NON_ZERO'
    VALIDATE_NON_NEGATIVE = 'VALIDATE_NON_NEGATIVE'
    VALIDATE_NUMERIC = 'VALIDATE_NUMERIC'
    NO_OP = 'NO_OP'


class OperatorPropertiesKeys(Enum):
    VALUE = 'VALUE'
    VALUES = 'VALUES'
    DATA_TYPE = 'DATA_TYPE'
    UPPER_BOUND = 'UPPER_BOUND'
    LOWER_BOUND = 'LOWER_BOUND'
    SOURCE_DATA_TYPE = 'SOURCE_DATA_TYPE'
    DESTINATION_DATA_TYPE = 'DESTINATION_DATA_TYPE'
    VALIDATION_ACTION = 'VALIDATION_ACTION'
    MASK_VALUE = 'MASK_VALUE'
    MASK_LENGTH = 'MASK_LENGTH'
    TRUNCATE_LENGTH = 'TRUNCATE_LENGTH'
    MATH_OPERATION_FIELDS_ORDER = 'MATH_OPERATION_FIELDS_ORDER'
    CONCAT_FORMAT = 'CONCAT_FORMAT'
    SUBFIELD_CATEGORY_MAP = 'SUBFIELD_CATEGORY_MAP'
    EXCLUDE_SOURCE_FIELDS_LIST = 'EXCLUDE_SOURCE_FIELDS_LIST'
    INCLUDE_NEW_FIELDS = 'INCLUDE_NEW_FIELDS'
    ORDERED_PARTITION_KEYS_LIST = 'ORDERED_PARTITION_KEYS_LIST'


class Operators(Enum):
    PROJECTION = 'PROJECTION'
    LESS_THAN = 'LESS_THAN'
    GREATER_THAN = 'GREATER_THAN'
    CONTAINS = 'CONTAINS'
    BETWEEN = 'BETWEEN'
    LESS_THAN_OR_EQUAL_TO = 'LESS_THAN_OR_EQUAL_TO'
    GREATER_THAN_OR_EQUAL_TO = 'GREATER_THAN_OR_EQUAL_TO'
    EQUAL_TO = 'EQUAL_TO'
    NOT_EQUAL_TO = 'NOT_EQUAL_TO'
    ADDITION = 'ADDITION'
    MULTIPLICATION = 'MULTIPLICATION'
    DIVISION = 'DIVISION'
    SUBTRACTION = 'SUBTRACTION'
    MASK_ALL = 'MASK_ALL'
    MASK_FIRST_N = 'MASK_FIRST_N'
    MASK_LAST_N = 'MASK_LAST_N'
    VALIDATE_NON_NULL = 'VALIDATE_NON_NULL'
    VALIDATE_NON_ZERO = 'VALIDATE_NON_ZERO'
    VALIDATE_NON_NEGATIVE = 'VALIDATE_NON_NEGATIVE'
    VALIDATE_NUMERIC = 'VALIDATE_NUMERIC'
    NO_OP = 'NO_OP'


class PardotConnectorOperator(Enum):
    PROJECTION = 'PROJECTION'
    EQUAL_TO = 'EQUAL_TO'
    NO_OP = 'NO_OP'
    ADDITION = 'ADDITION'
    MULTIPLICATION = 'MULTIPLICATION'
    DIVISION = 'DIVISION'
    SUBTRACTION = 'SUBTRACTION'
    MASK_ALL = 'MASK_ALL'
    MASK_FIRST_N = 'MASK_FIRST_N'
    MASK_LAST_N = 'MASK_LAST_N'
    VALIDATE_NON_NULL = 'VALIDATE_NON_NULL'
    VALIDATE_NON_ZERO = 'VALIDATE_NON_ZERO'
    VALIDATE_NON_NEGATIVE = 'VALIDATE_NON_NEGATIVE'
    VALIDATE_NUMERIC = 'VALIDATE_NUMERIC'


class PardotConnectorProfileProperties(BaseModel):
    businessUnitId: Optional[BusinessUnitId] = None
    instanceUrl: Optional[InstanceUrl] = None
    isSandboxEnvironment: Optional[Boolean] = None


class PardotMetadata(BaseModel):
    pass


class PardotSourceProperties(BaseModel):
    object: Object


class Password(RootModel[SecretStr]):
    root: SecretStr


class PathPrefix(Enum):
    EXECUTION_ID = 'EXECUTION_ID'
    SCHEMA_VERSION = 'SCHEMA_VERSION'


class PathPrefixHierarchy(RootModel[List[PathPrefix]]):
    root: List[PathPrefix]


class PortNumber(RootModel[conint(ge=1, le=65535)]):
    root: conint(ge=1, le=65535)


class PrefixFormat(Enum):
    YEAR = 'YEAR'
    MONTH = 'MONTH'
    DAY = 'DAY'
    HOUR = 'HOUR'
    MINUTE = 'MINUTE'


class PrefixType(Enum):
    FILENAME = 'FILENAME'
    PATH = 'PATH'
    PATH_AND_FILENAME = 'PATH_AND_FILENAME'


class PrivateConnectionProvisioningFailureCause(Enum):
    CONNECTOR_AUTHENTICATION = 'CONNECTOR_AUTHENTICATION'
    CONNECTOR_SERVER = 'CONNECTOR_SERVER'
    INTERNAL_SERVER = 'INTERNAL_SERVER'
    ACCESS_DENIED = 'ACCESS_DENIED'
    VALIDATION = 'VALIDATION'


class PrivateConnectionProvisioningFailureMessage(
    RootModel[constr(pattern=r'[\s\w/!@#+=.-]*', max_length=2048)]
):
    root: constr(pattern=r'[\s\w/!@#+=.-]*', max_length=2048)


class PrivateConnectionProvisioningStatus(Enum):
    FAILED = 'FAILED'
    PENDING = 'PENDING'
    CREATED = 'CREATED'


class PrivateLinkServiceName(
    RootModel[constr(pattern=r'^$|com.amazonaws.vpce.[\w/!:@#.\-]+', max_length=512)]
):
    root: constr(pattern=r'^$|com.amazonaws.vpce.[\w/!:@#.\-]+', max_length=512)


class ProfilePropertyKey(
    RootModel[constr(pattern=r'[\w]+', min_length=1, max_length=128)]
):
    root: constr(pattern=r'[\w]+', min_length=1, max_length=128)


class ProfilePropertyValue(RootModel[constr(pattern=r'\S+', max_length=2048)]):
    root: constr(pattern=r'\S+', max_length=2048)


class Property(RootModel[constr(pattern=r'.+', max_length=2048)]):
    root: constr(pattern=r'.+', max_length=2048)


class Range(BaseModel):
    maximum: Optional[Double] = None
    minimum: Optional[Double] = None


class RedirectUri(RootModel[constr(pattern=r'\S+', max_length=512)]):
    root: constr(pattern=r'\S+', max_length=512)


class RedshiftDestinationProperties(BaseModel):
    bucketPrefix: Optional[BucketPrefix] = None
    errorHandlingConfig: Optional[ErrorHandlingConfig] = None
    intermediateBucketName: BucketName
    object: Object


class RedshiftMetadata(BaseModel):
    pass


class RefreshToken(RootModel[constr(pattern=r'\S+', max_length=2048)]):
    root: constr(pattern=r'\S+', max_length=2048)


class Region(RootModel[constr(pattern=r'\S+', max_length=64)]):
    root: constr(pattern=r'\S+', max_length=64)


class RegionList(RootModel[List[Region]]):
    root: List[Region]


class RegisterConnectorResponse(BaseModel):
    connectorArn: Optional[ARN] = None


class RegisteredBy(RootModel[constr(pattern=r'\S+', max_length=512)]):
    root: constr(pattern=r'\S+', max_length=512)


class ResourceNotFoundException(RootModel[Any]):
    root: Any


class RoleArn(RootModel[constr(pattern=r'arn:aws:iam:.*:[0-9]+:.*', max_length=512)]):
    root: constr(pattern=r'arn:aws:iam:.*:[0-9]+:.*', max_length=512)


class S3ConnectorOperator(Enum):
    PROJECTION = 'PROJECTION'
    LESS_THAN = 'LESS_THAN'
    GREATER_THAN = 'GREATER_THAN'
    BETWEEN = 'BETWEEN'
    LESS_THAN_OR_EQUAL_TO = 'LESS_THAN_OR_EQUAL_TO'
    GREATER_THAN_OR_EQUAL_TO = 'GREATER_THAN_OR_EQUAL_TO'
    EQUAL_TO = 'EQUAL_TO'
    NOT_EQUAL_TO = 'NOT_EQUAL_TO'
    ADDITION = 'ADDITION'
    MULTIPLICATION = 'MULTIPLICATION'
    DIVISION = 'DIVISION'
    SUBTRACTION = 'SUBTRACTION'
    MASK_ALL = 'MASK_ALL'
    MASK_FIRST_N = 'MASK_FIRST_N'
    MASK_LAST_N = 'MASK_LAST_N'
    VALIDATE_NON_NULL = 'VALIDATE_NON_NULL'
    VALIDATE_NON_ZERO = 'VALIDATE_NON_ZERO'
    VALIDATE_NON_NEGATIVE = 'VALIDATE_NON_NEGATIVE'
    VALIDATE_NUMERIC = 'VALIDATE_NUMERIC'
    NO_OP = 'NO_OP'


class S3InputFileType(Enum):
    CSV = 'CSV'
    JSON = 'JSON'


class S3InputFormatConfig(BaseModel):
    s3InputFileType: Optional[S3InputFileType] = None


class S3Metadata(BaseModel):
    pass


class S3SourceProperties(BaseModel):
    bucketName: BucketName
    bucketPrefix: Optional[BucketPrefix] = None
    s3InputFormatConfig: Optional[S3InputFormatConfig] = None


class SAPODataConnectorOperator(Enum):
    PROJECTION = 'PROJECTION'
    LESS_THAN = 'LESS_THAN'
    CONTAINS = 'CONTAINS'
    GREATER_THAN = 'GREATER_THAN'
    BETWEEN = 'BETWEEN'
    LESS_THAN_OR_EQUAL_TO = 'LESS_THAN_OR_EQUAL_TO'
    GREATER_THAN_OR_EQUAL_TO = 'GREATER_THAN_OR_EQUAL_TO'
    EQUAL_TO = 'EQUAL_TO'
    NOT_EQUAL_TO = 'NOT_EQUAL_TO'
    ADDITION = 'ADDITION'
    MULTIPLICATION = 'MULTIPLICATION'
    DIVISION = 'DIVISION'
    SUBTRACTION = 'SUBTRACTION'
    MASK_ALL = 'MASK_ALL'
    MASK_FIRST_N = 'MASK_FIRST_N'
    MASK_LAST_N = 'MASK_LAST_N'
    VALIDATE_NON_NULL = 'VALIDATE_NON_NULL'
    VALIDATE_NON_ZERO = 'VALIDATE_NON_ZERO'
    VALIDATE_NON_NEGATIVE = 'VALIDATE_NON_NEGATIVE'
    VALIDATE_NUMERIC = 'VALIDATE_NUMERIC'
    NO_OP = 'NO_OP'


class SAPODataMetadata(BaseModel):
    pass


class SAPODataSourceProperties(BaseModel):
    objectPath: Optional[Object] = None


class SalesforceConnectorOperator(Enum):
    PROJECTION = 'PROJECTION'
    LESS_THAN = 'LESS_THAN'
    CONTAINS = 'CONTAINS'
    GREATER_THAN = 'GREATER_THAN'
    BETWEEN = 'BETWEEN'
    LESS_THAN_OR_EQUAL_TO = 'LESS_THAN_OR_EQUAL_TO'
    GREATER_THAN_OR_EQUAL_TO = 'GREATER_THAN_OR_EQUAL_TO'
    EQUAL_TO = 'EQUAL_TO'
    NOT_EQUAL_TO = 'NOT_EQUAL_TO'
    ADDITION = 'ADDITION'
    MULTIPLICATION = 'MULTIPLICATION'
    DIVISION = 'DIVISION'
    SUBTRACTION = 'SUBTRACTION'
    MASK_ALL = 'MASK_ALL'
    MASK_FIRST_N = 'MASK_FIRST_N'
    MASK_LAST_N = 'MASK_LAST_N'
    VALIDATE_NON_NULL = 'VALIDATE_NON_NULL'
    VALIDATE_NON_ZERO = 'VALIDATE_NON_ZERO'
    VALIDATE_NON_NEGATIVE = 'VALIDATE_NON_NEGATIVE'
    VALIDATE_NUMERIC = 'VALIDATE_NUMERIC'
    NO_OP = 'NO_OP'


class SalesforceConnectorProfileProperties(BaseModel):
    instanceUrl: Optional[InstanceUrl] = None
    isSandboxEnvironment: Optional[Boolean] = None
    usePrivateLinkForMetadataAndAuthorization: Optional[Boolean] = None


class SalesforceDataTransferApi(Enum):
    AUTOMATIC = 'AUTOMATIC'
    BULKV2 = 'BULKV2'
    REST_SYNC = 'REST_SYNC'


class SalesforceDataTransferApiList(RootModel[List[SalesforceDataTransferApi]]):
    root: List[SalesforceDataTransferApi]


class SalesforceMetadata(BaseModel):
    dataTransferApis: Optional[SalesforceDataTransferApiList] = None
    oAuthScopes: Optional[OAuthScopeList] = None


class SalesforceSourceProperties(BaseModel):
    dataTransferApi: Optional[SalesforceDataTransferApi] = None
    enableDynamicFieldUpdate: Optional[Boolean] = None
    includeDeletedRecords: Optional[Boolean] = None
    object: Object


class ScheduleExpression(RootModel[constr(pattern=r'.*', max_length=256)]):
    root: constr(pattern=r'.*', max_length=256)


class ScheduleFrequencyType(Enum):
    BYMINUTE = 'BYMINUTE'
    HOURLY = 'HOURLY'
    DAILY = 'DAILY'
    WEEKLY = 'WEEKLY'
    MONTHLY = 'MONTHLY'
    ONCE = 'ONCE'


class ScheduleOffset(RootModel[conint(ge=0, le=36000)]):
    root: conint(ge=0, le=36000)


class SchedulingFrequencyTypeList(RootModel[List[ScheduleFrequencyType]]):
    root: List[ScheduleFrequencyType]


class SecretKey(RootModel[SecretStr]):
    root: SecretStr


class ServiceNowConnectorOperator(Enum):
    PROJECTION = 'PROJECTION'
    CONTAINS = 'CONTAINS'
    LESS_THAN = 'LESS_THAN'
    GREATER_THAN = 'GREATER_THAN'
    BETWEEN = 'BETWEEN'
    LESS_THAN_OR_EQUAL_TO = 'LESS_THAN_OR_EQUAL_TO'
    GREATER_THAN_OR_EQUAL_TO = 'GREATER_THAN_OR_EQUAL_TO'
    EQUAL_TO = 'EQUAL_TO'
    NOT_EQUAL_TO = 'NOT_EQUAL_TO'
    ADDITION = 'ADDITION'
    MULTIPLICATION = 'MULTIPLICATION'
    DIVISION = 'DIVISION'
    SUBTRACTION = 'SUBTRACTION'
    MASK_ALL = 'MASK_ALL'
    MASK_FIRST_N = 'MASK_FIRST_N'
    MASK_LAST_N = 'MASK_LAST_N'
    VALIDATE_NON_NULL = 'VALIDATE_NON_NULL'
    VALIDATE_NON_ZERO = 'VALIDATE_NON_ZERO'
    VALIDATE_NON_NEGATIVE = 'VALIDATE_NON_NEGATIVE'
    VALIDATE_NUMERIC = 'VALIDATE_NUMERIC'
    NO_OP = 'NO_OP'


class ServiceNowConnectorProfileProperties(BaseModel):
    instanceUrl: InstanceUrl


class ServiceNowMetadata(BaseModel):
    pass


class ServiceNowSourceProperties(BaseModel):
    object: Object


class ServiceQuotaExceededException(RootModel[Any]):
    root: Any


class SingularConnectorOperator(Enum):
    PROJECTION = 'PROJECTION'
    EQUAL_TO = 'EQUAL_TO'
    ADDITION = 'ADDITION'
    MULTIPLICATION = 'MULTIPLICATION'
    DIVISION = 'DIVISION'
    SUBTRACTION = 'SUBTRACTION'
    MASK_ALL = 'MASK_ALL'
    MASK_FIRST_N = 'MASK_FIRST_N'
    MASK_LAST_N = 'MASK_LAST_N'
    VALIDATE_NON_NULL = 'VALIDATE_NON_NULL'
    VALIDATE_NON_ZERO = 'VALIDATE_NON_ZERO'
    VALIDATE_NON_NEGATIVE = 'VALIDATE_NON_NEGATIVE'
    VALIDATE_NUMERIC = 'VALIDATE_NUMERIC'
    NO_OP = 'NO_OP'


class SingularConnectorProfileCredentials(BaseModel):
    apiKey: ApiKey


class SingularConnectorProfileProperties(BaseModel):
    pass


class SingularMetadata(BaseModel):
    pass


class SingularSourceProperties(BaseModel):
    object: Object


class SlackConnectorOperator(Enum):
    PROJECTION = 'PROJECTION'
    LESS_THAN = 'LESS_THAN'
    GREATER_THAN = 'GREATER_THAN'
    BETWEEN = 'BETWEEN'
    LESS_THAN_OR_EQUAL_TO = 'LESS_THAN_OR_EQUAL_TO'
    GREATER_THAN_OR_EQUAL_TO = 'GREATER_THAN_OR_EQUAL_TO'
    EQUAL_TO = 'EQUAL_TO'
    ADDITION = 'ADDITION'
    MULTIPLICATION = 'MULTIPLICATION'
    DIVISION = 'DIVISION'
    SUBTRACTION = 'SUBTRACTION'
    MASK_ALL = 'MASK_ALL'
    MASK_FIRST_N = 'MASK_FIRST_N'
    MASK_LAST_N = 'MASK_LAST_N'
    VALIDATE_NON_NULL = 'VALIDATE_NON_NULL'
    VALIDATE_NON_ZERO = 'VALIDATE_NON_ZERO'
    VALIDATE_NON_NEGATIVE = 'VALIDATE_NON_NEGATIVE'
    VALIDATE_NUMERIC = 'VALIDATE_NUMERIC'
    NO_OP = 'NO_OP'


class SlackConnectorProfileProperties(BaseModel):
    instanceUrl: InstanceUrl


class SlackMetadata(BaseModel):
    oAuthScopes: Optional[OAuthScopeList] = None


class SlackSourceProperties(BaseModel):
    object: Object


class SnowflakeDestinationProperties(BaseModel):
    bucketPrefix: Optional[BucketPrefix] = None
    errorHandlingConfig: Optional[ErrorHandlingConfig] = None
    intermediateBucketName: BucketName
    object: Object


class SnowflakeMetadata(BaseModel):
    supportedRegions: Optional[RegionList] = None


class SourceFieldProperties(BaseModel):
    isQueryable: Optional[Boolean] = None
    isRetrievable: Optional[Boolean] = None
    isTimestampFieldForIncrementalQueries: Optional[Boolean] = None


class Stage(RootModel[constr(pattern=r'\S+', max_length=512)]):
    root: constr(pattern=r'\S+', max_length=512)


class StartFlowRequest(BaseModel):
    clientToken: Optional[ClientToken] = None
    flowName: FlowName


class StartFlowResponse(BaseModel):
    executionId: Optional[ExecutionId] = None
    flowArn: Optional[FlowArn] = None
    flowStatus: Optional[FlowStatus] = None


class StopFlowRequest(BaseModel):
    flowName: FlowName


class StopFlowResponse(BaseModel):
    flowArn: Optional[FlowArn] = None
    flowStatus: Optional[FlowStatus] = None


class String(RootModel[constr(pattern=r'.*', max_length=2048)]):
    root: constr(pattern=r'.*', max_length=2048)


class SuccessResponseHandlingConfig(BaseModel):
    bucketName: Optional[BucketName] = None
    bucketPrefix: Optional[BucketPrefix] = None


class SupportedApiVersion(RootModel[constr(pattern=r'\S+', max_length=256)]):
    root: constr(pattern=r'\S+', max_length=256)


class SupportedApiVersionList(RootModel[List[SupportedApiVersion]]):
    root: List[SupportedApiVersion]


class SupportedOperatorList(RootModel[List[Operators]]):
    root: List[Operators]


class TagKey(
    RootModel[
        constr(pattern=r'^(?!aws:)[a-zA-Z+-=._:/]+$', min_length=1, max_length=128)
    ]
):
    model_config = ConfigDict(
        regex_engine="python-re",
    )
    root: constr(pattern=r'^(?!aws:)[a-zA-Z+-=._:/]+$', min_length=1, max_length=128)


class TagKeyList(RootModel[List[TagKey]]):
    root: List[TagKey] = Field(..., max_length=50, min_length=0)


class TagResourceResponse(BaseModel):
    pass


class TagValue(RootModel[constr(pattern=r'[\s\w+-=\.:/@]*', max_length=256)]):
    root: constr(pattern=r'[\s\w+-=\.:/@]*', max_length=256)


class TaskPropertiesMap(RootModel[Optional[Dict[str, Property]]]):
    root: Optional[Dict[str, Property]] = None


class TaskType(Enum):
    Arithmetic = 'Arithmetic'
    Filter = 'Filter'
    Map = 'Map'
    Map_all = 'Map_all'
    Mask = 'Mask'
    Merge = 'Merge'
    Passthrough = 'Passthrough'
    Truncate = 'Truncate'
    Validate = 'Validate'
    Partition = 'Partition'


class ThrottlingException(RootModel[Any]):
    root: Any


class Timezone(RootModel[constr(pattern=r'.*', max_length=256)]):
    root: constr(pattern=r'.*', max_length=256)


class TokenUrl(
    RootModel[
        constr(
            pattern=r'^(https?)://[-a-zA-Z0-9+&@#/%?=~_|!:,.;]*[-a-zA-Z0-9+&@#/%=~_|]',
            max_length=256,
        )
    ]
):
    root: constr(
        pattern=r'^(https?)://[-a-zA-Z0-9+&@#/%?=~_|!:,.;]*[-a-zA-Z0-9+&@#/%=~_|]',
        max_length=256,
    )


class TokenUrlCustomProperties(RootModel[Optional[Dict[str, CustomPropertyValue]]]):
    root: Optional[Dict[str, CustomPropertyValue]] = None


class TokenUrlList(RootModel[List[TokenUrl]]):
    root: List[TokenUrl]


class TrendmicroConnectorOperator(Enum):
    PROJECTION = 'PROJECTION'
    EQUAL_TO = 'EQUAL_TO'
    ADDITION = 'ADDITION'
    MULTIPLICATION = 'MULTIPLICATION'
    DIVISION = 'DIVISION'
    SUBTRACTION = 'SUBTRACTION'
    MASK_ALL = 'MASK_ALL'
    MASK_FIRST_N = 'MASK_FIRST_N'
    MASK_LAST_N = 'MASK_LAST_N'
    VALIDATE_NON_NULL = 'VALIDATE_NON_NULL'
    VALIDATE_NON_ZERO = 'VALIDATE_NON_ZERO'
    VALIDATE_NON_NEGATIVE = 'VALIDATE_NON_NEGATIVE'
    VALIDATE_NUMERIC = 'VALIDATE_NUMERIC'
    NO_OP = 'NO_OP'


class TrendmicroConnectorProfileCredentials(BaseModel):
    apiSecretKey: ApiSecretKey


class TrendmicroConnectorProfileProperties(BaseModel):
    pass


class TrendmicroMetadata(BaseModel):
    pass


class TrendmicroSourceProperties(BaseModel):
    object: Object


class TriggerType(Enum):
    Scheduled = 'Scheduled'
    Event = 'Event'
    OnDemand = 'OnDemand'


class TriggerTypeList(RootModel[List[TriggerType]]):
    root: List[TriggerType]


class UnregisterConnectorRequest(BaseModel):
    connectorLabel: ConnectorLabel
    forceDelete: Optional[Boolean] = None


class UnregisterConnectorResponse(BaseModel):
    pass


class UnsupportedOperationException(RootModel[Any]):
    root: Any


class UntagResourceRequest(BaseModel):
    pass


class UntagResourceResponse(BaseModel):
    pass


class UpdateConnectorProfileResponse(BaseModel):
    connectorProfileArn: Optional[ConnectorProfileArn] = None


class UpdateConnectorRegistrationResponse(BaseModel):
    connectorArn: Optional[ARN] = None


class UpdateFlowResponse(BaseModel):
    flowStatus: Optional[FlowStatus] = None


class UpdatedBy(RootModel[constr(pattern=r'\S+', max_length=256)]):
    root: constr(pattern=r'\S+', max_length=256)


class UpsolverBucketName(
    RootModel[constr(pattern=r'^(upsolver-appflow)\S*', min_length=16, max_length=63)]
):
    root: constr(pattern=r'^(upsolver-appflow)\S*', min_length=16, max_length=63)


class UpsolverMetadata(BaseModel):
    pass


class Username(RootModel[constr(pattern=r'\S+', max_length=512)]):
    root: constr(pattern=r'\S+', max_length=512)


class ValidationException(RootModel[Any]):
    root: Any


class Value(RootModel[constr(pattern=r'\S+', max_length=128)]):
    root: constr(pattern=r'\S+', max_length=128)


class VeevaConnectorOperator(Enum):
    PROJECTION = 'PROJECTION'
    LESS_THAN = 'LESS_THAN'
    GREATER_THAN = 'GREATER_THAN'
    CONTAINS = 'CONTAINS'
    BETWEEN = 'BETWEEN'
    LESS_THAN_OR_EQUAL_TO = 'LESS_THAN_OR_EQUAL_TO'
    GREATER_THAN_OR_EQUAL_TO = 'GREATER_THAN_OR_EQUAL_TO'
    EQUAL_TO = 'EQUAL_TO'
    NOT_EQUAL_TO = 'NOT_EQUAL_TO'
    ADDITION = 'ADDITION'
    MULTIPLICATION = 'MULTIPLICATION'
    DIVISION = 'DIVISION'
    SUBTRACTION = 'SUBTRACTION'
    MASK_ALL = 'MASK_ALL'
    MASK_FIRST_N = 'MASK_FIRST_N'
    MASK_LAST_N = 'MASK_LAST_N'
    VALIDATE_NON_NULL = 'VALIDATE_NON_NULL'
    VALIDATE_NON_ZERO = 'VALIDATE_NON_ZERO'
    VALIDATE_NON_NEGATIVE = 'VALIDATE_NON_NEGATIVE'
    VALIDATE_NUMERIC = 'VALIDATE_NUMERIC'
    NO_OP = 'NO_OP'


class VeevaConnectorProfileCredentials(BaseModel):
    password: Password
    username: Username


class VeevaConnectorProfileProperties(BaseModel):
    instanceUrl: InstanceUrl


class VeevaMetadata(BaseModel):
    pass


class VeevaSourceProperties(BaseModel):
    documentType: Optional[DocumentType] = None
    includeAllVersions: Optional[Boolean] = None
    includeRenditions: Optional[Boolean] = None
    includeSourceFiles: Optional[Boolean] = None
    object: Object


class Warehouse(RootModel[constr(pattern=r'[\s\w/!@#+=.-]*', max_length=512)]):
    root: constr(pattern=r'[\s\w/!@#+=.-]*', max_length=512)


class WorkgroupName(RootModel[constr(pattern=r'\S+', max_length=512)]):
    root: constr(pattern=r'\S+', max_length=512)


class WriteOperationType(Enum):
    INSERT = 'INSERT'
    UPSERT = 'UPSERT'
    UPDATE = 'UPDATE'
    DELETE = 'DELETE'


class ZendeskConnectorOperator(Enum):
    PROJECTION = 'PROJECTION'
    GREATER_THAN = 'GREATER_THAN'
    ADDITION = 'ADDITION'
    MULTIPLICATION = 'MULTIPLICATION'
    DIVISION = 'DIVISION'
    SUBTRACTION = 'SUBTRACTION'
    MASK_ALL = 'MASK_ALL'
    MASK_FIRST_N = 'MASK_FIRST_N'
    MASK_LAST_N = 'MASK_LAST_N'
    VALIDATE_NON_NULL = 'VALIDATE_NON_NULL'
    VALIDATE_NON_ZERO = 'VALIDATE_NON_ZERO'
    VALIDATE_NON_NEGATIVE = 'VALIDATE_NON_NEGATIVE'
    VALIDATE_NUMERIC = 'VALIDATE_NUMERIC'
    NO_OP = 'NO_OP'


class ZendeskConnectorProfileProperties(BaseModel):
    instanceUrl: InstanceUrl


class ZendeskMetadata(BaseModel):
    oAuthScopes: Optional[OAuthScopeList] = None


class ZendeskSourceProperties(BaseModel):
    object: Object


class DeleteConnectorProfilePostRequest(BaseModel):
    connectorProfileName: constr(pattern=r'[\w/!@#+=.-]+', max_length=256) = Field(
        ...,
        description=' The name of the connector profile. The name is unique for each <code>ConnectorProfile</code> in your account. ',
    )
    forceDelete: Optional[bool] = Field(
        None,
        description=' Indicates whether Amazon AppFlow should delete the profile, even if it is currently in use in one or more flows. ',
    )


class DeleteFlowPostRequest(BaseModel):
    flowName: constr(pattern=r'[a-zA-Z0-9][\w!@#.-]+', max_length=256) = Field(
        ...,
        description=' The specified name of the flow. Spaces are not allowed. Use underscores (_) or hyphens (-) only. ',
    )
    forceDelete: Optional[bool] = Field(
        None,
        description=' Indicates whether Amazon AppFlow should delete the flow, even if it is currently in use. ',
    )


class DescribeConnectorPostRequest(BaseModel):
    connectorLabel: Optional[
        constr(pattern=r'[a-zA-Z0-9][\w!@#.-]+', max_length=256)
    ] = Field(
        None,
        description='The label of the connector. The label is unique for each <code>ConnectorRegistration</code> in your Amazon Web Services account. Only needed if calling for CUSTOMCONNECTOR connector type/.',
    )
    connectorType: ConnectorType = Field(
        ...,
        description='The connector type, such as CUSTOMCONNECTOR, Saleforce, Marketo. Please choose CUSTOMCONNECTOR for Lambda based custom connectors.',
    )


class DescribeConnectorEntityPostRequest(BaseModel):
    apiVersion: Optional[constr(pattern=r'\S+', max_length=256)] = Field(
        None, description="The version of the API that's used by the connector."
    )
    connectorEntityName: constr(pattern=r'\S+', max_length=1024) = Field(
        ..., description=' The entity name for that connector. '
    )
    connectorProfileName: Optional[constr(pattern=r'[\w/!@#+=.-]+', max_length=256)] = (
        Field(
            None,
            description=' The name of the connector profile. The name is unique for each <code>ConnectorProfile</code> in the Amazon Web Services account. ',
        )
    )
    connectorType: Optional[ConnectorType] = Field(
        None,
        description=' The type of connector application, such as Salesforce, Amplitude, and so on. ',
    )


class DescribeConnectorProfilesPostRequest(BaseModel):
    connectorLabel: Optional[
        constr(pattern=r'[a-zA-Z0-9][\w!@#.-]+', max_length=256)
    ] = Field(
        None,
        description='The name of the connector. The name is unique for each <code>ConnectorRegistration</code> in your Amazon Web Services account. Only needed if calling for CUSTOMCONNECTOR connector type/.',
    )
    connectorProfileNames: Optional[List[ConnectorProfileName]] = Field(
        None,
        description=' The name of the connector profile. The name is unique for each <code>ConnectorProfile</code> in the Amazon Web Services account. ',
        max_length=100,
        min_length=0,
    )
    connectorType: Optional[ConnectorType] = Field(
        None,
        description=' The type of connector, such as Salesforce, Amplitude, and so on. ',
    )
    maxResults: Optional[conint(ge=1, le=100)] = Field(
        None,
        description=' Specifies the maximum number of items that should be returned in the result set. The default for <code>maxResults</code> is 20 (for all paginated API operations). ',
    )
    nextToken: Optional[constr(pattern=r'\S+', max_length=2048)] = Field(
        None, description=' The pagination token for the next page of data. '
    )


class DescribeConnectorsPostRequest(BaseModel):
    connectorTypes: Optional[List[ConnectorType]] = Field(
        None,
        description=' The type of connector, such as Salesforce, Amplitude, and so on. ',
        max_length=100,
        min_length=0,
    )
    maxResults: Optional[conint(ge=1, le=100)] = Field(
        None,
        description='The maximum number of items that should be returned in the result set. The default is 20.',
    )
    nextToken: Optional[constr(pattern=r'\S+', max_length=2048)] = Field(
        None, description=' The pagination token for the next page of data. '
    )


class DescribeFlowPostRequest(BaseModel):
    flowName: constr(pattern=r'[a-zA-Z0-9][\w!@#.-]+', max_length=256) = Field(
        ...,
        description=' The specified name of the flow. Spaces are not allowed. Use underscores (_) or hyphens (-) only. ',
    )


class DescribeFlowExecutionRecordsPostRequest(BaseModel):
    flowName: constr(pattern=r'[a-zA-Z0-9][\w!@#.-]+', max_length=256) = Field(
        ...,
        description=' The specified name of the flow. Spaces are not allowed. Use underscores (_) or hyphens (-) only. ',
    )
    maxResults: Optional[conint(ge=1, le=100)] = Field(
        None,
        description=' Specifies the maximum number of items that should be returned in the result set. The default for <code>maxResults</code> is 20 (for all paginated API operations). ',
    )
    nextToken: Optional[constr(pattern=r'\S+', max_length=2048)] = Field(
        None, description=' The pagination token for the next page of data. '
    )


class ListConnectorEntitiesPostRequest(BaseModel):
    apiVersion: Optional[constr(pattern=r'\S+', max_length=256)] = Field(
        None, description="The version of the API that's used by the connector."
    )
    connectorProfileName: Optional[constr(pattern=r'[\w/!@#+=.-]+', max_length=256)] = (
        Field(
            None,
            description=' The name of the connector profile. The name is unique for each <code>ConnectorProfile</code> in the Amazon Web Services account, and is used to query the downstream connector. ',
        )
    )
    connectorType: Optional[ConnectorType] = Field(
        None,
        description=' The type of connector, such as Salesforce, Amplitude, and so on. ',
    )
    entitiesPath: Optional[constr(pattern=r'[\s\w/!@#+=,.-]*', max_length=256)] = Field(
        None,
        description=' This optional parameter is specific to connector implementation. Some connectors support multiple levels or categories of entities. You can find out the list of roots for such providers by sending a request without the <code>entitiesPath</code> parameter. If the connector supports entities at different roots, this initial request returns the list of roots. Otherwise, this request returns all entities supported by the provider. ',
    )
    maxResults: Optional[conint(ge=1, le=10000)] = Field(
        None,
        description='The maximum number of items that the operation returns in the response.',
    )
    nextToken: Optional[constr(pattern=r'\S+', max_length=2048)] = Field(
        None,
        description='A token that was provided by your prior <code>ListConnectorEntities</code> operation if the response was too big for the page size. You specify this token to get the next page of results in paginated response.',
    )


class ListConnectorsPostRequest(BaseModel):
    maxResults: Optional[conint(ge=1, le=100)] = Field(
        None,
        description='Specifies the maximum number of items that should be returned in the result set. The default for <code>maxResults</code> is 20 (for all paginated API operations).',
    )
    nextToken: Optional[constr(pattern=r'\S+', max_length=2048)] = Field(
        None, description='The pagination token for the next page of data.'
    )


class ListFlowsPostRequest(BaseModel):
    maxResults: Optional[conint(ge=1, le=100)] = Field(
        None,
        description=' Specifies the maximum number of items that should be returned in the result set. ',
    )
    nextToken: Optional[constr(pattern=r'\S+', max_length=2048)] = Field(
        None, description=' The pagination token for next page of data. '
    )


class ConnectorProvisioningConfig(BaseModel):
    lambda_: Optional[LambdaConnectorProvisioningConfig] = Field(None, alias='lambda')


class RegisterConnectorPostRequest(BaseModel):
    clientToken: Optional[constr(pattern=r'[ -~]+', min_length=1, max_length=256)] = (
        Field(
            None,
            description="<p>The <code>clientToken</code> parameter is an idempotency token. It ensures that your <code>RegisterConnector</code> request completes only once. You choose the value to pass. For example, if you don't receive a response from your request, you can safely retry the request with the same <code>clientToken</code> parameter value.</p> <p>If you omit a <code>clientToken</code> value, the Amazon Web Services SDK that you are using inserts a value for you. This way, the SDK can safely retry requests multiple times after a network error. You must provide your own value for other use cases.</p> <p>If you specify input parameters that differ from your first request, an error occurs. If you use a different value for <code>clientToken</code>, Amazon AppFlow considers it a new call to <code>RegisterConnector</code>. The token is active for 8 hours.</p>",
        )
    )
    connectorLabel: Optional[
        constr(pattern=r'[a-zA-Z0-9][\w!@#.-]+', max_length=256)
    ] = Field(
        None,
        description=' The name of the connector. The name is unique for each <code>ConnectorRegistration</code> in your Amazon Web Services account.',
    )
    connectorProvisioningConfig: Optional[ConnectorProvisioningConfig] = Field(
        None,
        description='Contains information about the configuration of the connector being registered.',
    )
    connectorProvisioningType: Optional[ConnectorProvisioningType] = Field(
        None,
        description='The type of provisioning that the connector supports, such as Lambda.',
    )
    description: Optional[constr(pattern=r'[\s\w/!@#+=.-]*', max_length=1024)] = Field(
        None, description="A description about the connector that's being registered."
    )


class StartFlowPostRequest(BaseModel):
    clientToken: Optional[constr(pattern=r'[ -~]+', min_length=1, max_length=256)] = (
        Field(
            None,
            description="<p>The <code>clientToken</code> parameter is an idempotency token. It ensures that your <code>StartFlow</code> request completes only once. You choose the value to pass. For example, if you don't receive a response from your request, you can safely retry the request with the same <code>clientToken</code> parameter value.</p> <p>If you omit a <code>clientToken</code> value, the Amazon Web Services SDK that you are using inserts a value for you. This way, the SDK can safely retry requests multiple times after a network error. You must provide your own value for other use cases.</p> <p>If you specify input parameters that differ from your first request, an error occurs for flows that run on a schedule or based on an event. However, the error doesn't occur for flows that run on demand. You set the conditions that initiate your flow for the <code>triggerConfig</code> parameter.</p> <p>If you use a different value for <code>clientToken</code>, Amazon AppFlow considers it a new call to <code>StartFlow</code>. The token is active for 8 hours.</p>",
        )
    )
    flowName: constr(pattern=r'[a-zA-Z0-9][\w!@#.-]+', max_length=256) = Field(
        ...,
        description=' The specified name of the flow. Spaces are not allowed. Use underscores (_) or hyphens (-) only. ',
    )


class StopFlowPostRequest(BaseModel):
    flowName: constr(pattern=r'[a-zA-Z0-9][\w!@#.-]+', max_length=256) = Field(
        ...,
        description=' The specified name of the flow. Spaces are not allowed. Use underscores (_) or hyphens (-) only. ',
    )


class TagsResourceArnPostRequest(BaseModel):
    tags: Dict[str, TagValue] = Field(
        ...,
        description=' The tags used to organize, track, or control access for your flow. ',
    )


class TagKeys(RootModel[List[TagKey]]):
    root: List[TagKey] = Field(..., max_length=50, min_length=0)


class UnregisterConnectorPostRequest(BaseModel):
    connectorLabel: constr(pattern=r'[a-zA-Z0-9][\w!@#.-]+', max_length=256) = Field(
        ...,
        description='The label of the connector. The label is unique for each <code>ConnectorRegistration</code> in your Amazon Web Services account.',
    )
    forceDelete: Optional[bool] = Field(
        None,
        description='Indicates whether Amazon AppFlow should unregister the connector, even if it is currently in use in one or more connector profiles. The default value is false.',
    )


class UpdateConnectorRegistrationPostRequest(BaseModel):
    clientToken: Optional[constr(pattern=r'[ -~]+', min_length=1, max_length=256)] = (
        Field(
            None,
            description="<p>The <code>clientToken</code> parameter is an idempotency token. It ensures that your <code>UpdateConnectorRegistration</code> request completes only once. You choose the value to pass. For example, if you don't receive a response from your request, you can safely retry the request with the same <code>clientToken</code> parameter value.</p> <p>If you omit a <code>clientToken</code> value, the Amazon Web Services SDK that you are using inserts a value for you. This way, the SDK can safely retry requests multiple times after a network error. You must provide your own value for other use cases.</p> <p>If you specify input parameters that differ from your first request, an error occurs. If you use a different value for <code>clientToken</code>, Amazon AppFlow considers it a new call to <code>UpdateConnectorRegistration</code>. The token is active for 8 hours.</p>",
        )
    )
    connectorLabel: constr(pattern=r'[a-zA-Z0-9][\w!@#.-]+', max_length=256) = Field(
        ...,
        description='The name of the connector. The name is unique for each connector registration in your AWS account.',
    )
    connectorProvisioningConfig: Optional[ConnectorProvisioningConfig] = Field(
        None,
        description='Contains information about the configuration of the connector being registered.',
    )
    description: Optional[constr(pattern=r'[\s\w/!@#+=.-]*', max_length=1024)] = Field(
        None,
        description="A description about the update that you're applying to the connector.",
    )


class AggregationConfig(BaseModel):
    aggregationType: Optional[AggregationType] = None
    targetFileSize: Optional[Long] = None


class AmplitudeConnectorProfileCredentials(BaseModel):
    apiKey: ApiKey
    secretKey: SecretKey


class AmplitudeSourceProperties(BaseModel):
    object: Object


class ApiKeyCredentials(BaseModel):
    apiKey: ApiKey
    apiSecretKey: Optional[ApiSecretKey] = None


class AuthParameter(BaseModel):
    connectorSuppliedValues: Optional[ConnectorSuppliedValueList] = None
    description: Optional[Description] = None
    isRequired: Optional[Boolean] = None
    isSensitiveField: Optional[Boolean] = None
    key: Optional[Key] = None
    label: Optional[Label] = None


class AuthParameterList(RootModel[List[AuthParameter]]):
    root: List[AuthParameter]


class BasicAuthCredentials(BaseModel):
    password: Password
    username: Username


class ConnectorDetail(BaseModel):
    applicationType: Optional[ApplicationType] = None
    connectorDescription: Optional[ConnectorDescription] = None
    connectorLabel: Optional[ConnectorLabel] = None
    connectorModes: Optional[ConnectorModeList] = None
    connectorName: Optional[ConnectorName] = None
    connectorOwner: Optional[ConnectorOwner] = None
    connectorProvisioningType: Optional[ConnectorProvisioningType] = None
    connectorType: Optional[ConnectorType] = None
    connectorVersion: Optional[ConnectorVersion] = None
    registeredAt: Optional[Date] = None
    registeredBy: Optional[RegisteredBy] = None


class ConnectorEntity(BaseModel):
    hasNestedEntities: Optional[Boolean] = None
    label: Optional[Label] = None
    name: Name


class ConnectorEntityList(RootModel[List[ConnectorEntity]]):
    root: List[ConnectorEntity]


class ConnectorEntityMap(RootModel[Optional[Dict[str, ConnectorEntityList]]]):
    root: Optional[Dict[str, ConnectorEntityList]] = None


class ConnectorList(RootModel[List[ConnectorDetail]]):
    root: List[ConnectorDetail]


class ConnectorOAuthRequest(BaseModel):
    authCode: Optional[AuthCode] = None
    redirectUri: Optional[RedirectUri] = None


class ConnectorOperator(BaseModel):
    Amplitude: Optional[AmplitudeConnectorOperator] = None
    CustomConnector: Optional[Operator] = None
    Datadog: Optional[DatadogConnectorOperator] = None
    Dynatrace: Optional[DynatraceConnectorOperator] = None
    GoogleAnalytics: Optional[GoogleAnalyticsConnectorOperator] = None
    InforNexus: Optional[InforNexusConnectorOperator] = None
    Marketo: Optional[MarketoConnectorOperator] = None
    Pardot: Optional[PardotConnectorOperator] = None
    S3: Optional[S3ConnectorOperator] = None
    SAPOData: Optional[SAPODataConnectorOperator] = None
    Salesforce: Optional[SalesforceConnectorOperator] = None
    ServiceNow: Optional[ServiceNowConnectorOperator] = None
    Singular: Optional[SingularConnectorOperator] = None
    Slack: Optional[SlackConnectorOperator] = None
    Trendmicro: Optional[TrendmicroConnectorOperator] = None
    Veeva: Optional[VeevaConnectorOperator] = None
    Zendesk: Optional[ZendeskConnectorOperator] = None


class ConnectorRuntimeSetting(BaseModel):
    connectorSuppliedValueOptions: Optional[ConnectorSuppliedValueOptionList] = None
    dataType: Optional[ConnectorRuntimeSettingDataType] = None
    description: Optional[Description] = None
    isRequired: Optional[Boolean] = None
    key: Optional[Key] = None
    label: Optional[Label] = None
    scope: Optional[ConnectorRuntimeSettingScope] = None


class ConnectorRuntimeSettingList(RootModel[List[ConnectorRuntimeSetting]]):
    root: List[ConnectorRuntimeSetting]


class CreateFlowResponse(BaseModel):
    flowArn: Optional[FlowArn] = None
    flowStatus: Optional[FlowStatus] = None


class CredentialsMap(RootModel[Optional[Dict[str, CredentialsMapValue]]]):
    root: Optional[Dict[str, CredentialsMapValue]] = None


class CustomAuthConfig(BaseModel):
    authParameters: Optional[AuthParameterList] = None
    customAuthenticationType: Optional[CustomAuthenticationType] = None


class CustomAuthConfigList(RootModel[List[CustomAuthConfig]]):
    root: List[CustomAuthConfig]


class CustomAuthCredentials(BaseModel):
    credentialsMap: Optional[CredentialsMap] = None
    customAuthenticationType: CustomAuthenticationType


class CustomProperties(RootModel[Optional[Dict[str, CustomPropertyValue]]]):
    root: Optional[Dict[str, CustomPropertyValue]] = None


class CustomerProfilesDestinationProperties(BaseModel):
    domainName: DomainName
    objectTypeName: Optional[ObjectTypeName] = None


class DatadogConnectorProfileProperties(BaseModel):
    instanceUrl: InstanceUrl


class DatadogSourceProperties(BaseModel):
    object: Object


class DeleteFlowRequest(BaseModel):
    flowName: FlowName
    forceDelete: Optional[Boolean] = None


class DescribeConnectorEntityRequest(BaseModel):
    apiVersion: Optional[ApiVersion] = None
    connectorEntityName: EntityName
    connectorProfileName: Optional[ConnectorProfileName] = None
    connectorType: Optional[ConnectorType] = None


class DescribeConnectorProfilesRequest(BaseModel):
    connectorLabel: Optional[ConnectorLabel] = None
    connectorProfileNames: Optional[ConnectorProfileNameList] = None
    connectorType: Optional[ConnectorType] = None
    maxResults: Optional[MaxResults] = None
    nextToken: Optional[NextToken] = None


class DescribeConnectorsRequest(BaseModel):
    connectorTypes: Optional[ConnectorTypeList] = None
    maxResults: Optional[MaxResults] = None
    nextToken: Optional[NextToken] = None


class DescribeFlowExecutionRecordsRequest(BaseModel):
    flowName: FlowName
    maxResults: Optional[MaxResults] = None
    nextToken: Optional[NextToken] = None


class DescribeFlowRequest(BaseModel):
    flowName: FlowName


class DynatraceConnectorProfileProperties(BaseModel):
    instanceUrl: InstanceUrl


class DynatraceSourceProperties(BaseModel):
    object: Object


class ErrorInfo(BaseModel):
    executionMessage: Optional[ExecutionMessage] = None
    putFailuresCount: Optional[Long] = None


class EventBridgeDestinationProperties(BaseModel):
    errorHandlingConfig: Optional[ErrorHandlingConfig] = None
    object: Object


class ExecutionDetails(BaseModel):
    mostRecentExecutionMessage: Optional[MostRecentExecutionMessage] = None
    mostRecentExecutionStatus: Optional[ExecutionStatus] = None
    mostRecentExecutionTime: Optional[Date] = None


class ExecutionResult(BaseModel):
    bytesProcessed: Optional[Long] = None
    bytesWritten: Optional[Long] = None
    errorInfo: Optional[ErrorInfo] = None
    recordsProcessed: Optional[Long] = None


class FilterOperatorList(RootModel[List[Operator]]):
    root: List[Operator]


class GlueDataCatalogConfig(BaseModel):
    databaseName: GlueDataCatalogDatabaseName
    roleArn: GlueDataCatalogIAMRole
    tablePrefix: GlueDataCatalogTablePrefix


class GoogleAnalyticsConnectorProfileCredentials(BaseModel):
    accessToken: Optional[AccessToken] = None
    clientId: ClientId
    clientSecret: ClientSecret
    oAuthRequest: Optional[ConnectorOAuthRequest] = None
    refreshToken: Optional[RefreshToken] = None


class GoogleAnalyticsMetadata(BaseModel):
    oAuthScopes: Optional[OAuthScopeList] = None


class GoogleAnalyticsSourceProperties(BaseModel):
    object: Object


class HoneycodeConnectorProfileCredentials(BaseModel):
    accessToken: Optional[AccessToken] = None
    oAuthRequest: Optional[ConnectorOAuthRequest] = None
    refreshToken: Optional[RefreshToken] = None


class HoneycodeDestinationProperties(BaseModel):
    errorHandlingConfig: Optional[ErrorHandlingConfig] = None
    object: Object


class HoneycodeMetadata(BaseModel):
    oAuthScopes: Optional[OAuthScopeList] = None


class IdFieldNameList(RootModel[List[Name]]):
    root: List[Name] = Field(
        ...,
        description=' A list of field names that can be used as an ID field when performing a write operation. ',
        min_length=0,
    )


class InforNexusConnectorProfileCredentials(BaseModel):
    accessKeyId: AccessKeyId
    datakey: Key
    secretAccessKey: Key
    userId: Username


class InforNexusConnectorProfileProperties(BaseModel):
    instanceUrl: InstanceUrl


class InforNexusSourceProperties(BaseModel):
    object: Object


class ListConnectorEntitiesRequest(BaseModel):
    apiVersion: Optional[ApiVersion] = None
    connectorProfileName: Optional[ConnectorProfileName] = None
    connectorType: Optional[ConnectorType] = None
    entitiesPath: Optional[EntitiesPath] = None
    maxResults: Optional[ListEntitiesMaxResults] = None
    nextToken: Optional[NextToken] = None


class ListConnectorEntitiesResponse(BaseModel):
    connectorEntityMap: ConnectorEntityMap
    nextToken: Optional[NextToken] = None


class ListConnectorsRequest(BaseModel):
    maxResults: Optional[MaxResults] = None
    nextToken: Optional[NextToken] = None


class ListConnectorsResponse(BaseModel):
    connectors: Optional[ConnectorList] = None
    nextToken: Optional[NextToken] = None


class ListFlowsRequest(BaseModel):
    maxResults: Optional[MaxResults] = None
    nextToken: Optional[NextToken] = None


class MarketoConnectorProfileCredentials(BaseModel):
    accessToken: Optional[AccessToken] = None
    clientId: ClientId
    clientSecret: ClientSecret
    oAuthRequest: Optional[ConnectorOAuthRequest] = None


class MarketoDestinationProperties(BaseModel):
    errorHandlingConfig: Optional[ErrorHandlingConfig] = None
    object: Object


class MarketoSourceProperties(BaseModel):
    object: Object


class MetadataCatalogConfig(BaseModel):
    glueDataCatalog: Optional[GlueDataCatalogConfig] = None


class OAuth2Credentials(BaseModel):
    accessToken: Optional[AccessToken] = None
    clientId: Optional[ClientId] = None
    clientSecret: Optional[ClientSecret] = None
    oAuthRequest: Optional[ConnectorOAuthRequest] = None
    refreshToken: Optional[RefreshToken] = None


class OAuth2CustomParameter(BaseModel):
    connectorSuppliedValues: Optional[ConnectorSuppliedValueList] = None
    description: Optional[Description] = None
    isRequired: Optional[Boolean] = None
    isSensitiveField: Optional[Boolean] = None
    key: Optional[Key] = None
    label: Optional[Label] = None
    type: Optional[OAuth2CustomPropType] = None


class OAuth2CustomPropertiesList(RootModel[List[OAuth2CustomParameter]]):
    root: List[OAuth2CustomParameter]


class OAuth2Defaults(BaseModel):
    authCodeUrls: Optional[AuthCodeUrlList] = None
    oauth2CustomProperties: Optional[OAuth2CustomPropertiesList] = None
    oauth2GrantTypesSupported: Optional[OAuth2GrantTypeSupportedList] = None
    oauthScopes: Optional[OAuthScopeList] = None
    tokenUrls: Optional[TokenUrlList] = None


class OAuth2Properties(BaseModel):
    oAuth2GrantType: OAuth2GrantType
    tokenUrl: TokenUrl
    tokenUrlCustomProperties: Optional[TokenUrlCustomProperties] = None


class OAuthCredentials(BaseModel):
    accessToken: Optional[AccessToken] = None
    clientId: ClientId
    clientSecret: ClientSecret
    oAuthRequest: Optional[ConnectorOAuthRequest] = None
    refreshToken: Optional[RefreshToken] = None


class OAuthProperties(BaseModel):
    authCodeUrl: AuthCodeUrl
    oAuthScopes: OAuthScopeList
    tokenUrl: TokenUrl


class PardotConnectorProfileCredentials(BaseModel):
    accessToken: Optional[AccessToken] = None
    clientCredentialsArn: Optional[ClientCredentialsArn] = None
    oAuthRequest: Optional[ConnectorOAuthRequest] = None
    refreshToken: Optional[RefreshToken] = None


class PrefixConfig(BaseModel):
    pathPrefixHierarchy: Optional[PathPrefixHierarchy] = None
    prefixFormat: Optional[PrefixFormat] = None
    prefixType: Optional[PrefixType] = None


class PrivateConnectionProvisioningState(BaseModel):
    failureCause: Optional[PrivateConnectionProvisioningFailureCause] = None
    failureMessage: Optional[PrivateConnectionProvisioningFailureMessage] = None
    status: Optional[PrivateConnectionProvisioningStatus] = None


class ProfilePropertiesMap(RootModel[Optional[Dict[str, ProfilePropertyValue]]]):
    root: Optional[Dict[str, ProfilePropertyValue]] = None


class RedshiftConnectorProfileCredentials(BaseModel):
    password: Optional[Password] = None
    username: Optional[String] = None


class RedshiftConnectorProfileProperties(BaseModel):
    bucketName: BucketName
    bucketPrefix: Optional[BucketPrefix] = None
    clusterIdentifier: Optional[ClusterIdentifier] = None
    dataApiRoleArn: Optional[DataApiRoleArn] = None
    databaseName: Optional[DatabaseName] = None
    databaseUrl: Optional[DatabaseUrl] = None
    isRedshiftServerless: Optional[Boolean] = None
    roleArn: RoleArn
    workgroupName: Optional[WorkgroupName] = None


class RegisterConnectorRequest(BaseModel):
    clientToken: Optional[ClientToken] = None
    connectorLabel: Optional[ConnectorLabel] = None
    connectorProvisioningConfig: Optional[ConnectorProvisioningConfig] = None
    connectorProvisioningType: Optional[ConnectorProvisioningType] = None
    description: Optional[Description] = None


class RegistrationOutput(BaseModel):
    message: Optional[String] = None
    result: Optional[String] = None
    status: Optional[ExecutionStatus] = None


class S3OutputFormatConfig(BaseModel):
    aggregationConfig: Optional[AggregationConfig] = None
    fileType: Optional[FileType] = None
    prefixConfig: Optional[PrefixConfig] = None
    preserveSourceDataTyping: Optional[JavaBoolean] = None


class SAPODataConnectorProfileCredentials(BaseModel):
    basicAuthCredentials: Optional[BasicAuthCredentials] = None
    oAuthCredentials: Optional[OAuthCredentials] = None


class SAPODataConnectorProfileProperties(BaseModel):
    applicationHostUrl: ApplicationHostUrl
    applicationServicePath: ApplicationServicePath
    clientNumber: ClientNumber
    logonLanguage: Optional[LogonLanguage] = None
    oAuthProperties: Optional[OAuthProperties] = None
    portNumber: PortNumber
    privateLinkServiceName: Optional[PrivateLinkServiceName] = None


class SAPODataDestinationProperties(BaseModel):
    errorHandlingConfig: Optional[ErrorHandlingConfig] = None
    idFieldNames: Optional[IdFieldNameList] = None
    objectPath: Object
    successResponseHandlingConfig: Optional[SuccessResponseHandlingConfig] = None
    writeOperationType: Optional[WriteOperationType] = None


class SalesforceConnectorProfileCredentials(BaseModel):
    accessToken: Optional[AccessToken] = None
    clientCredentialsArn: Optional[ClientCredentialsArn] = None
    oAuthRequest: Optional[ConnectorOAuthRequest] = None
    refreshToken: Optional[RefreshToken] = None


class SalesforceDestinationProperties(BaseModel):
    dataTransferApi: Optional[SalesforceDataTransferApi] = None
    errorHandlingConfig: Optional[ErrorHandlingConfig] = None
    idFieldNames: Optional[IdFieldNameList] = None
    object: Object
    writeOperationType: Optional[WriteOperationType] = None


class ScheduledTriggerProperties(BaseModel):
    dataPullMode: Optional[DataPullMode] = None
    firstExecutionFrom: Optional[Date] = None
    flowErrorDeactivationThreshold: Optional[FlowErrorDeactivationThreshold] = None
    scheduleEndTime: Optional[Date] = None
    scheduleExpression: ScheduleExpression
    scheduleOffset: Optional[ScheduleOffset] = None
    scheduleStartTime: Optional[Date] = None
    timezone: Optional[Timezone] = None


class ServiceNowConnectorProfileCredentials(BaseModel):
    password: Password
    username: Username


class SlackConnectorProfileCredentials(BaseModel):
    accessToken: Optional[AccessToken] = None
    clientId: ClientId
    clientSecret: ClientSecret
    oAuthRequest: Optional[ConnectorOAuthRequest] = None


class SnowflakeConnectorProfileCredentials(BaseModel):
    password: Password
    username: Username


class SnowflakeConnectorProfileProperties(BaseModel):
    accountName: Optional[AccountName] = None
    bucketName: BucketName
    bucketPrefix: Optional[BucketPrefix] = None
    privateLinkServiceName: Optional[PrivateLinkServiceName] = None
    region: Optional[Region] = None
    stage: Stage
    warehouse: Warehouse


class SourceFields(RootModel[List[String]]):
    root: List[String]


class SupportedValueList(RootModel[List[Value]]):
    root: List[Value]


class SupportedWriteOperationList(RootModel[List[WriteOperationType]]):
    root: List[WriteOperationType]


class TagMap(RootModel[Optional[Dict[str, TagValue]]]):
    root: Optional[Dict[str, TagValue]] = None


class TagResourceRequest(BaseModel):
    tags: TagMap


class Task(BaseModel):
    connectorOperator: Optional[ConnectorOperator] = None
    destinationField: Optional[DestinationField] = None
    sourceFields: SourceFields
    taskProperties: Optional[TaskPropertiesMap] = None
    taskType: TaskType


class Tasks(RootModel[List[Task]]):
    root: List[Task]


class TriggerProperties(BaseModel):
    Scheduled: Optional[ScheduledTriggerProperties] = None


class UpdateConnectorRegistrationRequest(BaseModel):
    clientToken: Optional[ClientToken] = None
    connectorLabel: ConnectorLabel
    connectorProvisioningConfig: Optional[ConnectorProvisioningConfig] = None
    description: Optional[Description] = None


class UpsolverS3OutputFormatConfig(BaseModel):
    aggregationConfig: Optional[AggregationConfig] = None
    fileType: Optional[FileType] = None
    prefixConfig: PrefixConfig


class ZendeskConnectorProfileCredentials(BaseModel):
    accessToken: Optional[AccessToken] = None
    clientId: ClientId
    clientSecret: ClientSecret
    oAuthRequest: Optional[ConnectorOAuthRequest] = None


class ZendeskDestinationProperties(BaseModel):
    errorHandlingConfig: Optional[ErrorHandlingConfig] = None
    idFieldNames: Optional[IdFieldNameList] = None
    object: Object
    writeOperationType: Optional[WriteOperationType] = None


class TriggerConfig1(BaseModel):
    triggerProperties: Optional[TriggerProperties] = None
    triggerType: Optional[TriggerType] = None


class AuthenticationConfig(BaseModel):
    customAuthConfigs: Optional[CustomAuthConfigList] = None
    isApiKeyAuthSupported: Optional[Boolean] = None
    isBasicAuthSupported: Optional[Boolean] = None
    isCustomAuthSupported: Optional[Boolean] = None
    isOAuth2Supported: Optional[Boolean] = None
    oAuth2Defaults: Optional[OAuth2Defaults] = None


class ConnectorMetadata(BaseModel):
    Amplitude: Optional[AmplitudeMetadata] = None
    CustomerProfiles: Optional[CustomerProfilesMetadata] = None
    Datadog: Optional[DatadogMetadata] = None
    Dynatrace: Optional[DynatraceMetadata] = None
    EventBridge: Optional[EventBridgeMetadata] = None
    GoogleAnalytics: Optional[GoogleAnalyticsMetadata] = None
    Honeycode: Optional[HoneycodeMetadata] = None
    InforNexus: Optional[InforNexusMetadata] = None
    Marketo: Optional[MarketoMetadata] = None
    Pardot: Optional[PardotMetadata] = None
    Redshift: Optional[RedshiftMetadata] = None
    S3: Optional[S3Metadata] = None
    SAPOData: Optional[SAPODataMetadata] = None
    Salesforce: Optional[SalesforceMetadata] = None
    ServiceNow: Optional[ServiceNowMetadata] = None
    Singular: Optional[SingularMetadata] = None
    Slack: Optional[SlackMetadata] = None
    Snowflake: Optional[SnowflakeMetadata] = None
    Trendmicro: Optional[TrendmicroMetadata] = None
    Upsolver: Optional[UpsolverMetadata] = None
    Veeva: Optional[VeevaMetadata] = None
    Zendesk: Optional[ZendeskMetadata] = None


class CustomConnectorDestinationProperties(BaseModel):
    customProperties: Optional[CustomProperties] = None
    entityName: EntityName
    errorHandlingConfig: Optional[ErrorHandlingConfig] = None
    idFieldNames: Optional[IdFieldNameList] = None
    writeOperationType: Optional[WriteOperationType] = None


class CustomConnectorProfileCredentials(BaseModel):
    apiKey: Optional[ApiKeyCredentials] = None
    authenticationType: AuthenticationType
    basic: Optional[BasicAuthCredentials] = None
    custom: Optional[CustomAuthCredentials] = None
    oauth2: Optional[OAuth2Credentials] = None


class CustomConnectorProfileProperties(BaseModel):
    oAuth2Properties: Optional[OAuth2Properties] = None
    profileProperties: Optional[ProfilePropertiesMap] = None


class CustomConnectorSourceProperties(BaseModel):
    customProperties: Optional[CustomProperties] = None
    entityName: EntityName


class DestinationFieldProperties(BaseModel):
    isCreatable: Optional[Boolean] = None
    isDefaultedOnCreate: Optional[Boolean] = None
    isNullable: Optional[Boolean] = None
    isUpdatable: Optional[Boolean] = None
    isUpsertable: Optional[Boolean] = None
    supportedWriteOperations: Optional[SupportedWriteOperationList] = None


class FieldTypeDetails(BaseModel):
    fieldLengthRange: Optional[Range] = None
    fieldType: FieldType
    fieldValueRange: Optional[Range] = None
    filterOperators: FilterOperatorList
    supportedDateFormat: Optional[String] = None
    supportedValues: Optional[SupportedValueList] = None
    valueRegexPattern: Optional[String] = None


class FlowDefinition(BaseModel):
    createdAt: Optional[Date] = None
    createdBy: Optional[CreatedBy] = None
    description: Optional[FlowDescription] = None
    destinationConnectorLabel: Optional[ConnectorLabel] = None
    destinationConnectorType: Optional[ConnectorType] = None
    flowArn: Optional[FlowArn] = None
    flowName: Optional[FlowName] = None
    flowStatus: Optional[FlowStatus] = None
    lastRunExecutionDetails: Optional[ExecutionDetails] = None
    lastUpdatedAt: Optional[Date] = None
    lastUpdatedBy: Optional[UpdatedBy] = None
    sourceConnectorLabel: Optional[ConnectorLabel] = None
    sourceConnectorType: Optional[ConnectorType] = None
    tags: Optional[TagMap] = None
    triggerType: Optional[TriggerType] = None


class FlowList(RootModel[List[FlowDefinition]]):
    root: List[FlowDefinition]


class ListFlowsResponse(BaseModel):
    flows: Optional[FlowList] = None
    nextToken: Optional[NextToken] = None


class ListTagsForResourceResponse(BaseModel):
    tags: Optional[TagMap] = None


class MetadataCatalogDetail(BaseModel):
    catalogType: Optional[CatalogType] = None
    partitionRegistrationOutput: Optional[RegistrationOutput] = None
    tableName: Optional[String] = None
    tableRegistrationOutput: Optional[RegistrationOutput] = None


class MetadataCatalogDetails(RootModel[List[MetadataCatalogDetail]]):
    root: List[MetadataCatalogDetail]


class S3DestinationProperties(BaseModel):
    bucketName: BucketName
    bucketPrefix: Optional[BucketPrefix] = None
    s3OutputFormatConfig: Optional[S3OutputFormatConfig] = None


class SourceConnectorProperties(BaseModel):
    Amplitude: Optional[AmplitudeSourceProperties] = None
    CustomConnector: Optional[CustomConnectorSourceProperties] = None
    Datadog: Optional[DatadogSourceProperties] = None
    Dynatrace: Optional[DynatraceSourceProperties] = None
    GoogleAnalytics: Optional[GoogleAnalyticsSourceProperties] = None
    InforNexus: Optional[InforNexusSourceProperties] = None
    Marketo: Optional[MarketoSourceProperties] = None
    Pardot: Optional[PardotSourceProperties] = None
    S3: Optional[S3SourceProperties] = None
    SAPOData: Optional[SAPODataSourceProperties] = None
    Salesforce: Optional[SalesforceSourceProperties] = None
    ServiceNow: Optional[ServiceNowSourceProperties] = None
    Singular: Optional[SingularSourceProperties] = None
    Slack: Optional[SlackSourceProperties] = None
    Trendmicro: Optional[TrendmicroSourceProperties] = None
    Veeva: Optional[VeevaSourceProperties] = None
    Zendesk: Optional[ZendeskSourceProperties] = None


class SourceFlowConfig(BaseModel):
    apiVersion: Optional[ApiVersion] = None
    connectorProfileName: Optional[ConnectorProfileName] = None
    connectorType: ConnectorType
    incrementalPullConfig: Optional[IncrementalPullConfig] = None
    sourceConnectorProperties: SourceConnectorProperties


class SupportedFieldTypeDetails(BaseModel):
    v1: FieldTypeDetails


class TriggerConfig(BaseModel):
    triggerProperties: Optional[TriggerProperties] = None
    triggerType: TriggerType


class UpsolverDestinationProperties(BaseModel):
    bucketName: UpsolverBucketName
    bucketPrefix: Optional[BucketPrefix] = None
    s3OutputFormatConfig: UpsolverS3OutputFormatConfig


class SourceFlowConfig1(BaseModel):
    apiVersion: Optional[ApiVersion] = None
    connectorProfileName: Optional[ConnectorProfileName] = None
    connectorType: Optional[ConnectorType] = None
    incrementalPullConfig: Optional[IncrementalPullConfig] = None
    sourceConnectorProperties: Optional[SourceConnectorProperties] = None


class ConnectorConfiguration(BaseModel):
    authenticationConfig: Optional[AuthenticationConfig] = None
    canUseAsDestination: Optional[Boolean] = None
    canUseAsSource: Optional[Boolean] = None
    connectorArn: Optional[ARN] = None
    connectorDescription: Optional[ConnectorDescription] = None
    connectorLabel: Optional[ConnectorLabel] = None
    connectorMetadata: Optional[ConnectorMetadata] = None
    connectorModes: Optional[ConnectorModeList] = None
    connectorName: Optional[ConnectorName] = None
    connectorOwner: Optional[ConnectorOwner] = None
    connectorProvisioningConfig: Optional[ConnectorProvisioningConfig] = None
    connectorProvisioningType: Optional[ConnectorProvisioningType] = None
    connectorRuntimeSettings: Optional[ConnectorRuntimeSettingList] = None
    connectorType: Optional[ConnectorType] = None
    connectorVersion: Optional[ConnectorVersion] = None
    isPrivateLinkEnabled: Optional[Boolean] = None
    isPrivateLinkEndpointUrlRequired: Optional[Boolean] = None
    logoURL: Optional[LogoURL] = None
    registeredAt: Optional[Date] = None
    registeredBy: Optional[RegisteredBy] = None
    supportedApiVersions: Optional[SupportedApiVersionList] = None
    supportedDestinationConnectors: Optional[ConnectorTypeList] = None
    supportedOperators: Optional[SupportedOperatorList] = None
    supportedSchedulingFrequencies: Optional[SchedulingFrequencyTypeList] = None
    supportedTriggerTypes: Optional[TriggerTypeList] = None
    supportedWriteOperations: Optional[SupportedWriteOperationList] = None


class ConnectorConfigurationsMap(
    RootModel[Optional[Dict[str, ConnectorConfiguration]]]
):
    root: Optional[Dict[str, ConnectorConfiguration]] = None


class ConnectorEntityField(BaseModel):
    customProperties: Optional[CustomProperties] = None
    defaultValue: Optional[String] = None
    description: Optional[Description] = None
    destinationProperties: Optional[DestinationFieldProperties] = None
    identifier: Identifier
    isDeprecated: Optional[Boolean] = None
    isPrimaryKey: Optional[Boolean] = None
    label: Optional[Label] = None
    parentIdentifier: Optional[Identifier] = None
    sourceProperties: Optional[SourceFieldProperties] = None
    supportedFieldTypeDetails: Optional[SupportedFieldTypeDetails] = None


class ConnectorEntityFieldList(RootModel[List[ConnectorEntityField]]):
    root: List[ConnectorEntityField]


class ConnectorProfileCredentials(BaseModel):
    Amplitude: Optional[AmplitudeConnectorProfileCredentials] = None
    CustomConnector: Optional[CustomConnectorProfileCredentials] = None
    Datadog: Optional[DatadogConnectorProfileCredentials] = None
    Dynatrace: Optional[DynatraceConnectorProfileCredentials] = None
    GoogleAnalytics: Optional[GoogleAnalyticsConnectorProfileCredentials] = None
    Honeycode: Optional[HoneycodeConnectorProfileCredentials] = None
    InforNexus: Optional[InforNexusConnectorProfileCredentials] = None
    Marketo: Optional[MarketoConnectorProfileCredentials] = None
    Pardot: Optional[PardotConnectorProfileCredentials] = None
    Redshift: Optional[RedshiftConnectorProfileCredentials] = None
    SAPOData: Optional[SAPODataConnectorProfileCredentials] = None
    Salesforce: Optional[SalesforceConnectorProfileCredentials] = None
    ServiceNow: Optional[ServiceNowConnectorProfileCredentials] = None
    Singular: Optional[SingularConnectorProfileCredentials] = None
    Slack: Optional[SlackConnectorProfileCredentials] = None
    Snowflake: Optional[SnowflakeConnectorProfileCredentials] = None
    Trendmicro: Optional[TrendmicroConnectorProfileCredentials] = None
    Veeva: Optional[VeevaConnectorProfileCredentials] = None
    Zendesk: Optional[ZendeskConnectorProfileCredentials] = None


class ConnectorProfileProperties(BaseModel):
    Amplitude: Optional[AmplitudeConnectorProfileProperties] = None
    CustomConnector: Optional[CustomConnectorProfileProperties] = None
    Datadog: Optional[DatadogConnectorProfileProperties] = None
    Dynatrace: Optional[DynatraceConnectorProfileProperties] = None
    GoogleAnalytics: Optional[GoogleAnalyticsConnectorProfileProperties] = None
    Honeycode: Optional[HoneycodeConnectorProfileProperties] = None
    InforNexus: Optional[InforNexusConnectorProfileProperties] = None
    Marketo: Optional[MarketoConnectorProfileProperties] = None
    Pardot: Optional[PardotConnectorProfileProperties] = None
    Redshift: Optional[RedshiftConnectorProfileProperties] = None
    SAPOData: Optional[SAPODataConnectorProfileProperties] = None
    Salesforce: Optional[SalesforceConnectorProfileProperties] = None
    ServiceNow: Optional[ServiceNowConnectorProfileProperties] = None
    Singular: Optional[SingularConnectorProfileProperties] = None
    Slack: Optional[SlackConnectorProfileProperties] = None
    Snowflake: Optional[SnowflakeConnectorProfileProperties] = None
    Trendmicro: Optional[TrendmicroConnectorProfileProperties] = None
    Veeva: Optional[VeevaConnectorProfileProperties] = None
    Zendesk: Optional[ZendeskConnectorProfileProperties] = None


class DescribeConnectorEntityResponse(BaseModel):
    connectorEntityFields: ConnectorEntityFieldList


class DescribeConnectorResponse(BaseModel):
    connectorConfiguration: Optional[ConnectorConfiguration] = None


class DescribeConnectorsResponse(BaseModel):
    connectorConfigurations: Optional[ConnectorConfigurationsMap] = None
    connectors: Optional[ConnectorList] = None
    nextToken: Optional[NextToken] = None


class DestinationConnectorProperties(BaseModel):
    CustomConnector: Optional[CustomConnectorDestinationProperties] = None
    CustomerProfiles: Optional[CustomerProfilesDestinationProperties] = None
    EventBridge: Optional[EventBridgeDestinationProperties] = None
    Honeycode: Optional[HoneycodeDestinationProperties] = None
    LookoutMetrics: Optional[LookoutMetricsDestinationProperties] = None
    Marketo: Optional[MarketoDestinationProperties] = None
    Redshift: Optional[RedshiftDestinationProperties] = None
    S3: Optional[S3DestinationProperties] = None
    SAPOData: Optional[SAPODataDestinationProperties] = None
    Salesforce: Optional[SalesforceDestinationProperties] = None
    Snowflake: Optional[SnowflakeDestinationProperties] = None
    Upsolver: Optional[UpsolverDestinationProperties] = None
    Zendesk: Optional[ZendeskDestinationProperties] = None


class DestinationFlowConfig(BaseModel):
    apiVersion: Optional[ApiVersion] = None
    connectorProfileName: Optional[ConnectorProfileName] = None
    connectorType: ConnectorType
    destinationConnectorProperties: DestinationConnectorProperties


class DestinationFlowConfigList(RootModel[List[DestinationFlowConfig]]):
    root: List[DestinationFlowConfig]


class ExecutionRecord(BaseModel):
    dataPullEndTime: Optional[Date] = None
    dataPullStartTime: Optional[Date] = None
    executionId: Optional[ExecutionId] = None
    executionResult: Optional[ExecutionResult] = None
    executionStatus: Optional[ExecutionStatus] = None
    lastUpdatedAt: Optional[Date] = None
    metadataCatalogDetails: Optional[MetadataCatalogDetails] = None
    startedAt: Optional[Date] = None


class FlowExecutionList(RootModel[List[ExecutionRecord]]):
    root: List[ExecutionRecord]


class UpdateFlowRequest(BaseModel):
    clientToken: Optional[ClientToken] = None
    description: Optional[FlowDescription] = None
    destinationFlowConfigList: DestinationFlowConfigList
    flowName: FlowName
    metadataCatalogConfig: Optional[MetadataCatalogConfig] = None
    sourceFlowConfig: SourceFlowConfig
    tasks: Tasks
    triggerConfig: TriggerConfig


class ConnectorProfileConfig1(BaseModel):
    connectorProfileCredentials: Optional[ConnectorProfileCredentials] = None
    connectorProfileProperties: Optional[ConnectorProfileProperties] = None


class CreateConnectorProfilePostRequest(BaseModel):
    clientToken: Optional[constr(pattern=r'[ -~]+', min_length=1, max_length=256)] = (
        Field(
            None,
            description="<p>The <code>clientToken</code> parameter is an idempotency token. It ensures that your <code>CreateConnectorProfile</code> request completes only once. You choose the value to pass. For example, if you don't receive a response from your request, you can safely retry the request with the same <code>clientToken</code> parameter value.</p> <p>If you omit a <code>clientToken</code> value, the Amazon Web Services SDK that you are using inserts a value for you. This way, the SDK can safely retry requests multiple times after a network error. You must provide your own value for other use cases.</p> <p>If you specify input parameters that differ from your first request, an error occurs. If you use a different value for <code>clientToken</code>, Amazon AppFlow considers it a new call to <code>CreateConnectorProfile</code>. The token is active for 8 hours.</p>",
        )
    )
    connectionMode: ConnectionMode = Field(
        ...,
        description=' Indicates the connection mode and specifies whether it is public or private. Private flows use Amazon Web Services PrivateLink to route data over Amazon Web Services infrastructure without exposing it to the public internet. ',
    )
    connectorLabel: Optional[
        constr(pattern=r'[a-zA-Z0-9][\w!@#.-]+', max_length=256)
    ] = Field(
        None,
        description='The label of the connector. The label is unique for each <code>ConnectorRegistration</code> in your Amazon Web Services account. Only needed if calling for CUSTOMCONNECTOR connector type/.',
    )
    connectorProfileConfig: ConnectorProfileConfig1 = Field(
        ...,
        description=' Defines the connector-specific configuration and credentials for the connector profile. ',
    )
    connectorProfileName: constr(pattern=r'[\w/!@#+=.-]+', max_length=256) = Field(
        ...,
        description=' The name of the connector profile. The name is unique for each <code>ConnectorProfile</code> in your Amazon Web Services account. ',
    )
    connectorType: ConnectorType = Field(
        ...,
        description=' The type of connector, such as Salesforce, Amplitude, and so on. ',
    )
    kmsArn: Optional[
        constr(pattern=r'arn:aws:kms:.*:[0-9]+:.*', min_length=20, max_length=2048)
    ] = Field(
        None,
        description=" The ARN (Amazon Resource Name) of the Key Management Service (KMS) key you provide for encryption. This is required if you do not want to use the Amazon AppFlow-managed KMS key. If you don't provide anything here, Amazon AppFlow uses the Amazon AppFlow-managed KMS key. ",
    )


class CreateFlowPostRequest(BaseModel):
    clientToken: Optional[constr(pattern=r'[ -~]+', min_length=1, max_length=256)] = (
        Field(
            None,
            description="<p>The <code>clientToken</code> parameter is an idempotency token. It ensures that your <code>CreateFlow</code> request completes only once. You choose the value to pass. For example, if you don't receive a response from your request, you can safely retry the request with the same <code>clientToken</code> parameter value.</p> <p>If you omit a <code>clientToken</code> value, the Amazon Web Services SDK that you are using inserts a value for you. This way, the SDK can safely retry requests multiple times after a network error. You must provide your own value for other use cases.</p> <p>If you specify input parameters that differ from your first request, an error occurs. If you use a different value for <code>clientToken</code>, Amazon AppFlow considers it a new call to <code>CreateFlow</code>. The token is active for 8 hours.</p>",
        )
    )
    description: Optional[constr(pattern=r'[\w!@#\-.?,\s]*', max_length=2048)] = Field(
        None, description=' A description of the flow you want to create. '
    )
    destinationFlowConfigList: List[DestinationFlowConfig] = Field(
        ...,
        description=' The configuration that controls how Amazon AppFlow places data in the destination connector. ',
    )
    flowName: constr(pattern=r'[a-zA-Z0-9][\w!@#.-]+', max_length=256) = Field(
        ...,
        description=' The specified name of the flow. Spaces are not allowed. Use underscores (_) or hyphens (-) only. ',
    )
    kmsArn: Optional[
        constr(pattern=r'arn:aws:kms:.*:[0-9]+:.*', min_length=20, max_length=2048)
    ] = Field(
        None,
        description=" The ARN (Amazon Resource Name) of the Key Management Service (KMS) key you provide for encryption. This is required if you do not want to use the Amazon AppFlow-managed KMS key. If you don't provide anything here, Amazon AppFlow uses the Amazon AppFlow-managed KMS key. ",
    )
    metadataCatalogConfig: Optional[MetadataCatalogConfig] = Field(
        None,
        description='Specifies the configuration that Amazon AppFlow uses when it catalogs your data. When Amazon AppFlow catalogs your data, it stores metadata in a data catalog.',
    )
    sourceFlowConfig: SourceFlowConfig1 = Field(
        ...,
        description=' Contains information about the configuration of the source connector used in the flow. ',
    )
    tags: Optional[Dict[str, TagValue]] = Field(
        None,
        description=' The tags used to organize, track, or control access for your flow. ',
    )
    tasks: List[Task] = Field(
        ...,
        description=' A list of tasks that Amazon AppFlow performs while transferring the data in the flow run. ',
    )
    triggerConfig: TriggerConfig1 = Field(
        ...,
        description=' The trigger settings that determine how and when Amazon AppFlow runs the specified flow. ',
    )


class UpdateConnectorProfilePostRequest(BaseModel):
    clientToken: Optional[constr(pattern=r'[ -~]+', min_length=1, max_length=256)] = (
        Field(
            None,
            description="<p>The <code>clientToken</code> parameter is an idempotency token. It ensures that your <code>UpdateConnectorProfile</code> request completes only once. You choose the value to pass. For example, if you don't receive a response from your request, you can safely retry the request with the same <code>clientToken</code> parameter value.</p> <p>If you omit a <code>clientToken</code> value, the Amazon Web Services SDK that you are using inserts a value for you. This way, the SDK can safely retry requests multiple times after a network error. You must provide your own value for other use cases.</p> <p>If you specify input parameters that differ from your first request, an error occurs. If you use a different value for <code>clientToken</code>, Amazon AppFlow considers it a new call to <code>UpdateConnectorProfile</code>. The token is active for 8 hours.</p>",
        )
    )
    connectionMode: ConnectionMode = Field(
        ...,
        description=' Indicates the connection mode and if it is public or private. ',
    )
    connectorProfileConfig: ConnectorProfileConfig1 = Field(
        ...,
        description=' Defines the connector-specific configuration and credentials for the connector profile. ',
    )
    connectorProfileName: constr(pattern=r'[\w/!@#+=.-]+', max_length=256) = Field(
        ...,
        description=' The name of the connector profile and is unique for each <code>ConnectorProfile</code> in the Amazon Web Services account. ',
    )


class UpdateFlowPostRequest(BaseModel):
    clientToken: Optional[constr(pattern=r'[ -~]+', min_length=1, max_length=256)] = (
        Field(
            None,
            description="<p>The <code>clientToken</code> parameter is an idempotency token. It ensures that your <code>UpdateFlow</code> request completes only once. You choose the value to pass. For example, if you don't receive a response from your request, you can safely retry the request with the same <code>clientToken</code> parameter value.</p> <p>If you omit a <code>clientToken</code> value, the Amazon Web Services SDK that you are using inserts a value for you. This way, the SDK can safely retry requests multiple times after a network error. You must provide your own value for other use cases.</p> <p>If you specify input parameters that differ from your first request, an error occurs. If you use a different value for <code>clientToken</code>, Amazon AppFlow considers it a new call to <code>UpdateFlow</code>. The token is active for 8 hours.</p>",
        )
    )
    description: Optional[constr(pattern=r'[\w!@#\-.?,\s]*', max_length=2048)] = Field(
        None, description=' A description of the flow. '
    )
    destinationFlowConfigList: List[DestinationFlowConfig] = Field(
        ...,
        description=' The configuration that controls how Amazon AppFlow transfers data to the destination connector. ',
    )
    flowName: constr(pattern=r'[a-zA-Z0-9][\w!@#.-]+', max_length=256) = Field(
        ...,
        description=' The specified name of the flow. Spaces are not allowed. Use underscores (_) or hyphens (-) only. ',
    )
    metadataCatalogConfig: Optional[MetadataCatalogConfig] = Field(
        None,
        description='Specifies the configuration that Amazon AppFlow uses when it catalogs your data. When Amazon AppFlow catalogs your data, it stores metadata in a data catalog.',
    )
    sourceFlowConfig: SourceFlowConfig1 = Field(
        ...,
        description=' Contains information about the configuration of the source connector used in the flow. ',
    )
    tasks: List[Task] = Field(
        ...,
        description=' A list of tasks that Amazon AppFlow performs while transferring the data in the flow run. ',
    )
    triggerConfig: TriggerConfig1 = Field(
        ...,
        description=' The trigger settings that determine how and when Amazon AppFlow runs the specified flow. ',
    )


class ConnectorProfile(BaseModel):
    connectionMode: Optional[ConnectionMode] = None
    connectorLabel: Optional[ConnectorLabel] = None
    connectorProfileArn: Optional[ConnectorProfileArn] = None
    connectorProfileName: Optional[ConnectorProfileName] = None
    connectorProfileProperties: Optional[ConnectorProfileProperties] = None
    connectorType: Optional[ConnectorType] = None
    createdAt: Optional[Date] = None
    credentialsArn: Optional[ARN] = None
    lastUpdatedAt: Optional[Date] = None
    privateConnectionProvisioningState: Optional[PrivateConnectionProvisioningState] = (
        None
    )


class ConnectorProfileConfig(BaseModel):
    connectorProfileCredentials: Optional[ConnectorProfileCredentials] = None
    connectorProfileProperties: ConnectorProfileProperties


class ConnectorProfileDetailList(RootModel[List[ConnectorProfile]]):
    root: List[ConnectorProfile]


class CreateConnectorProfileRequest(BaseModel):
    clientToken: Optional[ClientToken] = None
    connectionMode: ConnectionMode
    connectorLabel: Optional[ConnectorLabel] = None
    connectorProfileConfig: ConnectorProfileConfig
    connectorProfileName: ConnectorProfileName
    connectorType: ConnectorType
    kmsArn: Optional[KMSArn] = None


class CreateFlowRequest(BaseModel):
    clientToken: Optional[ClientToken] = None
    description: Optional[FlowDescription] = None
    destinationFlowConfigList: DestinationFlowConfigList
    flowName: FlowName
    kmsArn: Optional[KMSArn] = None
    metadataCatalogConfig: Optional[MetadataCatalogConfig] = None
    sourceFlowConfig: SourceFlowConfig
    tags: Optional[TagMap] = None
    tasks: Tasks
    triggerConfig: TriggerConfig


class DescribeConnectorProfilesResponse(BaseModel):
    connectorProfileDetails: Optional[ConnectorProfileDetailList] = None
    nextToken: Optional[NextToken] = None


class DescribeFlowExecutionRecordsResponse(BaseModel):
    flowExecutions: Optional[FlowExecutionList] = None
    nextToken: Optional[NextToken] = None


class DescribeFlowResponse(BaseModel):
    createdAt: Optional[Date] = None
    createdBy: Optional[CreatedBy] = None
    description: Optional[FlowDescription] = None
    destinationFlowConfigList: Optional[DestinationFlowConfigList] = None
    flowArn: Optional[FlowArn] = None
    flowName: Optional[FlowName] = None
    flowStatus: Optional[FlowStatus] = None
    flowStatusMessage: Optional[FlowStatusMessage] = None
    kmsArn: Optional[KMSArn] = None
    lastRunExecutionDetails: Optional[ExecutionDetails] = None
    lastRunMetadataCatalogDetails: Optional[MetadataCatalogDetails] = None
    lastUpdatedAt: Optional[Date] = None
    lastUpdatedBy: Optional[UpdatedBy] = None
    metadataCatalogConfig: Optional[MetadataCatalogConfig] = None
    schemaVersion: Optional[Long] = None
    sourceFlowConfig: Optional[SourceFlowConfig] = None
    tags: Optional[TagMap] = None
    tasks: Optional[Tasks] = None
    triggerConfig: Optional[TriggerConfig] = None


class UpdateConnectorProfileRequest(BaseModel):
    clientToken: Optional[ClientToken] = None
    connectionMode: ConnectionMode
    connectorProfileConfig: ConnectorProfileConfig
    connectorProfileName: ConnectorProfileName
